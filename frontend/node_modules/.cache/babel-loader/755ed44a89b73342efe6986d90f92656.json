{"remainingRequest":"E:\\github\\GateKeeper\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\github\\GateKeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\github\\GateKeeper\\frontend\\src\\components\\ServerList.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\github\\GateKeeper\\frontend\\src\\components\\ServerList.vue","mtime":1742523607917},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742449391247},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1742449393880},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742449391247},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1742449394890}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgVGVybWluYWwgfSBmcm9tICd4dGVybSc7CmltcG9ydCB7IEZpdEFkZG9uIH0gZnJvbSAneHRlcm0tYWRkb24tZml0JzsKaW1wb3J0IGlvIGZyb20gJ3NvY2tldC5pby1jbGllbnQnOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlcnZlcnM6IFtdLAogICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSwKICAgICAgc3NoVmlzaWJsZTogZmFsc2UsCiAgICAgIHRlcm1pbmFsOiBudWxsLAogICAgICBzZXJ2ZXJGb3JtOiB7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgaXA6ICcnLAogICAgICAgIHR5cGU6ICdXaW5kb3dzJywKICAgICAgICB1c2VybmFtZTogJycsCiAgICAgICAgcGFzc3dvcmQ6ICcnCiAgICAgIH0sCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgbmFtZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeacjeWKoeWZqOWQjeensCcsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBpcDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpUlQ5Zyw5Z2AJywKICAgICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICAgIH1dLAogICAgICAgIHR5cGU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fpgInmi6nmnI3liqHlmajnsbvlnosnLAogICAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgICB9XSwKICAgICAgICB1c2VybmFtZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeeUqOaIt+WQjScsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBwYXNzd29yZDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeWvhueggScsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XQogICAgICB9LAogICAgICBhY3RpdmVDb25uZWN0aW9uczoge30sCiAgICAgIC8vIOWtmOWCqOa0u+WKqOi/nuaOpeeahCB0b2tlbgogICAgICBoZWFydGJlYXRUaW1lcjogbnVsbCwKICAgICAgcmVmcmVzaEludGVydmFsOiBudWxsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGlzQWRtaW4oKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyICYmIHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIuaXNfYWRtaW47CiAgICB9LAogICAgaXNMb2dnZWRJbigpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIgIT09IG51bGw7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBsb2FkU2VydmVycygpIHsKICAgICAgLy8g5aaC5p6c5pyq55m75b2V77yM5LiN5Yqg6L295pyN5Yqh5Zmo5YiX6KGoCiAgICAgIGlmICghdGhpcy5pc0xvZ2dlZEluKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmF4aW9zLmdldCgnL2FwaS9zZXJ2ZXJzJyk7CiAgICAgICAgdGhpcy5zZXJ2ZXJzID0gcmVzcG9uc2UuZGF0YTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAvLyDlj6rlnKjnmbvlvZXnirbmgIHkuIvmmL7npLrplJnor6/mtojmga8KICAgICAgICBpZiAodGhpcy5pc0xvZ2dlZEluKSB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfojrflj5bmnI3liqHlmajliJfooajlpLHotKUnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzaG93QWRkRGlhbG9nKCkgewogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlOwogICAgICB0aGlzLnNlcnZlckZvcm0gPSB7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgaXA6ICcnLAogICAgICAgIHR5cGU6ICdXaW5kb3dzJywKICAgICAgICB1c2VybmFtZTogJycsCiAgICAgICAgcGFzc3dvcmQ6ICcnCiAgICAgIH07CiAgICB9LAogICAgYXN5bmMgc3VibWl0Rm9ybSgpIHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCB2YWxpZCA9IGF3YWl0IHRoaXMuJHJlZnMuc2VydmVyRm9ybS52YWxpZGF0ZSgpOwogICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgYXdhaXQgdGhpcy5heGlvcy5wb3N0KCcvYXBpL3NlcnZlcnMnLCB0aGlzLnNlcnZlckZvcm0pOwogICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKCfmt7vliqDmnI3liqHlmajmiJDlip8nKTsKICAgICAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgdGhpcy5sb2FkU2VydmVycygpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfmt7vliqDmnI3liqHlmajlpLHotKUnKTsKICAgICAgfQogICAgfSwKICAgIGFzeW5jIGRlbGV0ZVNlcnZlcihzZXJ2ZXIpIHsKICAgICAgdHJ5IHsKICAgICAgICBhd2FpdCB0aGlzLiRjb25maXJtKCfnoa7orqTliKDpmaTor6XmnI3liqHlmag/JywgJ+aPkOekuicsIHsKICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICAgIH0pOwogICAgICAgIGF3YWl0IHRoaXMuYXhpb3MuZGVsZXRlKGAvYXBpL3NlcnZlcnMvJHtzZXJ2ZXIuaWR9YCk7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKCfliKDpmaTmiJDlip8nKTsKICAgICAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgaWYgKGVycm9yICE9PSAnY2FuY2VsJykgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign5Yig6Zmk5aSx6LSlJyk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgYXN5bmMgY29ubmVjdFNlcnZlcihzZXJ2ZXIpIHsKICAgICAgdHJ5IHsKICAgICAgICBpZiAoc2VydmVyLnR5cGUgPT09ICdXaW5kb3dzJykgewogICAgICAgICAgLy8g6I635Y+W5pyN5Yqh5Zmo5a+G56CBCiAgICAgICAgICBjb25zdCBwYXNzd29yZFJlc3BvbnNlID0gYXdhaXQgdGhpcy5heGlvcy5nZXQoYC9hcGkvc2VydmVycy8ke3NlcnZlci5pZH0vcGFzc3dvcmRgKTsKICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcGFzc3dvcmRSZXNwb25zZS5kYXRhLnBhc3N3b3JkOwoKICAgICAgICAgIC8vIOWPkei1tyBSRFAg6L+e5o6lCiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3MucG9zdCgnL2FwaS9yZHAvY29ubmVjdCcsIHsKICAgICAgICAgICAgc2VydmVyX2lkOiBzZXJ2ZXIuaWQsCiAgICAgICAgICAgIHVzZXJuYW1lOiBzZXJ2ZXIudXNlcm5hbWUsCiAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZAogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcygnUkRQIOi/nuaOpeivt+axguW3suWPkemAgScpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBMaW51eCBTU0gg6L+e5o6lCiAgICAgICAgICBhd2FpdCB0aGlzLmNvbm5lY3RTU0goc2VydmVyKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6L+e5o6l5aSx6LSl77yaJyArIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhID8gZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvciA6IGVycm9yLm1lc3NhZ2UpKTsKICAgICAgfQogICAgfSwKICAgIGFzeW5jIGNvbm5lY3RTU0goc2VydmVyKSB7CiAgICAgIHRoaXMuc3NoVmlzaWJsZSA9IHRydWU7CiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICBpZiAoIXRoaXMudGVybWluYWwpIHsKICAgICAgICAgIHRoaXMudGVybWluYWwgPSBuZXcgVGVybWluYWwoKTsKICAgICAgICAgIGNvbnN0IGZpdEFkZG9uID0gbmV3IEZpdEFkZG9uKCk7CiAgICAgICAgICB0aGlzLnRlcm1pbmFsLmxvYWRBZGRvbihmaXRBZGRvbik7CiAgICAgICAgICB0aGlzLnRlcm1pbmFsLm9wZW4oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlcm1pbmFsJykpOwogICAgICAgICAgZml0QWRkb24uZml0KCk7CgogICAgICAgICAgLy8g6I635Y+W5pyN5Yqh5Zmo5a+G56CBCiAgICAgICAgICB0aGlzLmF4aW9zLmdldChgL2FwaS9zZXJ2ZXJzLyR7c2VydmVyLmlkfS9wYXNzd29yZGApLnRoZW4ocGFzc3dvcmRSZXNwb25zZSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcGFzc3dvcmRSZXNwb25zZS5kYXRhLnBhc3N3b3JkOwoKICAgICAgICAgICAgLy8g5L2/55SoIFNvY2tldC5JTyDov57mjqUgU1NICiAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IGlvKCdodHRwOi8vbG9jYWxob3N0OjUwMDAnKTsKICAgICAgICAgICAgc29ja2V0LmVtaXQoJ2Nvbm5lY3Rfc3NoJywgewogICAgICAgICAgICAgIGhvc3Q6IHNlcnZlci5pcCwKICAgICAgICAgICAgICB1c2VybmFtZTogc2VydmVyLnVzZXJuYW1lLAogICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc29ja2V0Lm9uKCdzc2hfb3V0cHV0JywgZGF0YSA9PiB7CiAgICAgICAgICAgICAgdGhpcy50ZXJtaW5hbC53cml0ZShkYXRhLmRhdGEpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc29ja2V0Lm9uKCdzc2hfZXJyb3InLCBkYXRhID0+IHsKICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGRhdGEuZXJyb3IpOwogICAgICAgICAgICAgIHRoaXMuc3NoVmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc29ja2V0Lm9uKCdkaXNjb25uZWN0JywgKCkgPT4gewogICAgICAgICAgICAgIHRoaXMuc3NoVmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy50ZXJtaW5hbC5vbkRhdGEoZGF0YSA9PiB7CiAgICAgICAgICAgICAgc29ja2V0LmVtaXQoJ3NzaF9pbnB1dCcsIGRhdGEpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6I635Y+W5pyN5Yqh5Zmo5a+G56CB5aSx6LSlJyk7CiAgICAgICAgICAgIHRoaXMuc3NoVmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7CiAgICAvLyDmr48zMOenkuWIt+aWsOS4gOasoeacjeWKoeWZqOWIl+ihqAogICAgdGhpcy5yZWZyZXNoSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgIGlmICh0aGlzLmlzTG9nZ2VkSW4pIHsKICAgICAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7CiAgICAgIH0KICAgIH0sIDMwMDAwKTsKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICBpZiAodGhpcy5yZWZyZXNoSW50ZXJ2YWwpIHsKICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJlZnJlc2hJbnRlcnZhbCk7CiAgICB9CiAgICBpZiAodGhpcy5oZWFydGJlYXRUaW1lcikgewogICAgICBjbGVhckludGVydmFsKHRoaXMuaGVhcnRiZWF0VGltZXIpOwogICAgfQogICAgaWYgKHRoaXMudGVybWluYWwpIHsKICAgICAgdGhpcy50ZXJtaW5hbC5kaXNwb3NlKCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"names":["Terminal","FitAddon","io","data","servers","dialogVisible","sshVisible","terminal","serverForm","name","ip","type","username","password","rules","required","message","trigger","activeConnections","heartbeatTimer","refreshInterval","computed","isAdmin","$store","state","user","is_admin","isLoggedIn","methods","loadServers","response","axios","get","error","$message","showAddDialog","submitForm","valid","$refs","validate","post","success","deleteServer","server","$confirm","delete","id","connectServer","passwordResponse","server_id","connectSSH","$nextTick","fitAddon","loadAddon","open","document","getElementById","fit","then","socket","emit","host","on","write","onData","catch","created","setInterval","beforeDestroy","clearInterval","dispose"],"sources":["src/components/ServerList.vue"],"sourcesContent":["<template>\r\n  <div class=\"server-list\">\r\n    <!-- 只有管理员才能看到添加服务器按钮 -->\r\n    <div class=\"toolbar\" v-if=\"isAdmin\">\r\n      <el-button type=\"primary\" @click=\"showAddDialog\">\r\n        <i class=\"el-icon-plus\"></i> 添加服务器\r\n      </el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"servers\" style=\"width: 100%\">\r\n      <el-table-column prop=\"name\" label=\"名称\" />\r\n      <el-table-column prop=\"ip\" label=\"IP地址\" />\r\n      <el-table-column prop=\"type\" label=\"类型\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n            {{ scope.row.type }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag v-if=\"scope.row.in_use\"\r\n                  :type=\"scope.row.in_use_by_me ? 'warning' : 'danger'\">\r\n            {{ scope.row.in_use_by_me ? '我正在使用中' : `${scope.row.in_use_by_username} 正在使用中` }}\r\n          </el-tag>\r\n          <el-tag v-else type=\"success\">空闲</el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"250\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button \r\n            type=\"primary\" \r\n            size=\"small\" \r\n            @click=\"connectServer(scope.row)\"\r\n            :disabled=\"scope.row.in_use && !scope.row.in_use_by_me\"\r\n            :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n            {{ scope.row.type === 'Windows' ? 'RDP连接' : 'SSH连接' }}\r\n          </el-button>\r\n          <!-- 只有管理员才能看到删除按钮 -->\r\n          <el-button\r\n            v-if=\"isAdmin\"\r\n            type=\"danger\"\r\n            size=\"small\"\r\n            @click=\"deleteServer(scope.row)\"\r\n          >\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 添加服务器对话框 -->\r\n    <el-dialog \r\n      title=\"添加服务器\" \r\n      :visible.sync=\"dialogVisible\" \r\n      width=\"700px\"\r\n      custom-class=\"server-dialog\"\r\n      :close-on-click-modal=\"false\">\r\n      <el-form \r\n        :model=\"serverForm\" \r\n        ref=\"serverForm\" \r\n        :rules=\"rules\"\r\n        label-width=\"80px\"\r\n        class=\"server-form\">\r\n        <div class=\"form-row\">\r\n          <el-form-item label=\"名称\" prop=\"name\" class=\"form-item\">\r\n            <el-input v-model=\"serverForm.name\" placeholder=\"请输入服务器名称\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"IP地址\" prop=\"ip\" class=\"form-item\">\r\n            <el-input v-model=\"serverForm.ip\" placeholder=\"请输入IP地址\"></el-input>\r\n          </el-form-item>\r\n        </div>\r\n        <div class=\"form-row\">\r\n          <el-form-item label=\"类型\" prop=\"type\" class=\"form-item-type\">\r\n            <el-select v-model=\"serverForm.type\" placeholder=\"请选择服务器类型\" style=\"width: 100%\">\r\n              <el-option label=\"Windows\" value=\"Windows\"></el-option>\r\n              <el-option label=\"Linux\" value=\"Linux\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 预留业务标签位置 -->\r\n          <div class=\"form-item-placeholder\"></div>\r\n        </div>\r\n        <div class=\"form-row\">\r\n          <el-form-item label=\"用户名\" prop=\"username\" class=\"form-item\">\r\n            <el-input v-model=\"serverForm.username\" placeholder=\"请输入用户名\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"密码\" prop=\"password\" class=\"form-item\">\r\n            <el-input type=\"password\" v-model=\"serverForm.password\" placeholder=\"请输入密码\" show-password></el-input>\r\n          </el-form-item>\r\n        </div>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- SSH终端窗口 -->\r\n    <el-dialog title=\"SSH终端\" :visible.sync=\"sshVisible\" fullscreen>\r\n      <div id=\"terminal\" class=\"terminal\"></div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Terminal } from 'xterm';\r\nimport { FitAddon } from 'xterm-addon-fit';\r\nimport io from 'socket.io-client';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      servers: [],\r\n      dialogVisible: false,\r\n      sshVisible: false,\r\n      terminal: null,\r\n      serverForm: {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        username: '',\r\n        password: ''\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: '请输入服务器名称', trigger: 'blur' }],\r\n        ip: [{ required: true, message: '请输入IP地址', trigger: 'blur' }],\r\n        type: [{ required: true, message: '请选择服务器类型', trigger: 'change' }],\r\n        username: [{ required: true, message: '请输入用户名', trigger: 'blur' }],\r\n        password: [{ required: true, message: '请输入密码', trigger: 'blur' }]\r\n      },\r\n      activeConnections: {},  // 存储活动连接的 token\r\n      heartbeatTimer: null,\r\n      refreshInterval: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    isAdmin() {\r\n      return this.$store.state.user && this.$store.state.user.is_admin;\r\n    },\r\n    isLoggedIn() {\r\n      return this.$store.state.user !== null;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async loadServers() {\r\n      // 如果未登录，不加载服务器列表\r\n      if (!this.isLoggedIn) {\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const response = await this.axios.get('/api/servers');\r\n        this.servers = response.data;\r\n      } catch (error) {\r\n        // 只在登录状态下显示错误消息\r\n        if (this.isLoggedIn) {\r\n          this.$message.error('获取服务器列表失败');\r\n        }\r\n      }\r\n    },\r\n\r\n    showAddDialog() {\r\n      this.dialogVisible = true;\r\n      this.serverForm = {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        username: '',\r\n        password: ''\r\n      };\r\n    },\r\n\r\n    async submitForm() {\r\n      try {\r\n        const valid = await this.$refs.serverForm.validate();\r\n        if (valid) {\r\n          await this.axios.post('/api/servers', this.serverForm);\r\n          this.$message.success('添加服务器成功');\r\n          this.dialogVisible = false;\r\n          this.loadServers();\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('添加服务器失败');\r\n      }\r\n    },\r\n\r\n    async deleteServer(server) {\r\n      try {\r\n        await this.$confirm('确认删除该服务器?', '提示', {\r\n          type: 'warning'\r\n        });\r\n        await this.axios.delete(`/api/servers/${server.id}`);\r\n        this.$message.success('删除成功');\r\n        this.loadServers();\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败');\r\n        }\r\n      }\r\n    },\r\n\r\n    async connectServer(server) {\r\n      try {\r\n        if (server.type === 'Windows') {\r\n          // 获取服务器密码\r\n          const passwordResponse = await this.axios.get(`/api/servers/${server.id}/password`);\r\n          const password = passwordResponse.data.password;\r\n\r\n          // 发起 RDP 连接\r\n          const response = await this.axios.post('/api/rdp/connect', {\r\n            server_id: server.id,\r\n            username: server.username,\r\n            password: password\r\n          });\r\n\r\n          if (response.data.success) {\r\n            this.$message.success('RDP 连接请求已发送');\r\n          }\r\n        } else {\r\n          // Linux SSH 连接\r\n          await this.connectSSH(server);\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('连接失败：' + (error.response && error.response.data ? error.response.data.error : error.message));\r\n\r\n      }\r\n    },\r\n\r\n    async connectSSH(server) {\r\n      this.sshVisible = true;\r\n      this.$nextTick(() => {\r\n        if (!this.terminal) {\r\n          this.terminal = new Terminal();\r\n          const fitAddon = new FitAddon();\r\n          this.terminal.loadAddon(fitAddon);\r\n          this.terminal.open(document.getElementById('terminal'));\r\n          fitAddon.fit();\r\n\r\n          // 获取服务器密码\r\n          this.axios.get(`/api/servers/${server.id}/password`).then(passwordResponse => {\r\n            const password = passwordResponse.data.password;\r\n\r\n            // 使用 Socket.IO 连接 SSH\r\n            const socket = io('http://localhost:5000');\r\n            socket.emit('connect_ssh', {\r\n              host: server.ip,\r\n              username: server.username,\r\n              password: password\r\n            });\r\n\r\n            socket.on('ssh_output', (data) => {\r\n              this.terminal.write(data.data);\r\n            });\r\n\r\n            socket.on('ssh_error', (data) => {\r\n              this.$message.error(data.error);\r\n              this.sshVisible = false;\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n              this.sshVisible = false;\r\n            });\r\n\r\n            this.terminal.onData(data => {\r\n              socket.emit('ssh_input', data);\r\n            });\r\n          }).catch(error => {\r\n            this.$message.error('获取服务器密码失败');\r\n            this.sshVisible = false;\r\n          });\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.loadServers();\r\n    // 每30秒刷新一次服务器列表\r\n    this.refreshInterval = setInterval(() => {\r\n      if (this.isLoggedIn) {\r\n        this.loadServers();\r\n      }\r\n    }, 30000);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n    if (this.heartbeatTimer) {\r\n      clearInterval(this.heartbeatTimer);\r\n    }\r\n    if (this.terminal) {\r\n      this.terminal.dispose();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.server-list {\r\n  padding: 20px;\r\n}\r\n.toolbar {\r\n  margin-bottom: 20px;\r\n}\r\n.terminal {\r\n  height: 100%;\r\n  background: #000;\r\n}\r\n/* 添加新的样式 */\r\n.server-dialog {\r\n  border-radius: 8px;\r\n}\r\n.server-form {\r\n  padding: 20px 20px 0;\r\n}\r\n.form-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n  margin-bottom: 22px;\r\n}\r\n.form-item {\r\n  flex: 1;\r\n  margin-bottom: 0;\r\n}\r\n.form-item-type {\r\n  flex: 0 0 45%;\r\n  margin-bottom: 0;\r\n}\r\n.form-item-placeholder {\r\n  flex: 0 0 45%;\r\n}\r\n.dialog-footer {\r\n  text-align: right;\r\n  padding-top: 10px;\r\n}\r\n:deep(.el-dialog__body) {\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n:deep(.el-form-item__label) {\r\n  font-weight: 500;\r\n}\r\n:deep(.el-input__inner) {\r\n  border-radius: 4px;\r\n}\r\n:deep(.el-dialog__header) {\r\n  padding: 20px 20px 10px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n:deep(.el-dialog__footer) {\r\n  border-top: 1px solid #eee;\r\n  padding: 15px 20px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]}]}