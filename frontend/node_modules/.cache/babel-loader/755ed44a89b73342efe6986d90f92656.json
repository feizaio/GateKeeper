{"remainingRequest":"E:\\github\\GateKeeper\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\github\\GateKeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\github\\GateKeeper\\frontend\\src\\components\\ServerList.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\github\\GateKeeper\\frontend\\src\\components\\ServerList.vue","mtime":1740636919651},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742449391247},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1742449393880},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742449391247},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1742449394890}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgVGVybWluYWwgfSBmcm9tICd4dGVybSc7CmltcG9ydCB7IEZpdEFkZG9uIH0gZnJvbSAneHRlcm0tYWRkb24tZml0JzsKaW1wb3J0IGlvIGZyb20gJ3NvY2tldC5pby1jbGllbnQnOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlcnZlcnM6IFtdLAogICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSwKICAgICAgc3NoVmlzaWJsZTogZmFsc2UsCiAgICAgIHRlcm1pbmFsOiBudWxsLAogICAgICBzZXJ2ZXJGb3JtOiB7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgaXA6ICcnLAogICAgICAgIHR5cGU6ICdXaW5kb3dzJywKICAgICAgICB1c2VybmFtZTogJycsCiAgICAgICAgcGFzc3dvcmQ6ICcnCiAgICAgIH0sCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgbmFtZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeacjeWKoeWZqOWQjeensCcsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBpcDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpUlQ5Zyw5Z2AJywKICAgICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICAgIH1dLAogICAgICAgIHR5cGU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fpgInmi6nmnI3liqHlmajnsbvlnosnLAogICAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgICB9XSwKICAgICAgICB1c2VybmFtZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeeUqOaIt+WQjScsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBwYXNzd29yZDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeWvhueggScsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XQogICAgICB9LAogICAgICBhY3RpdmVDb25uZWN0aW9uczoge30sCiAgICAgIC8vIOWtmOWCqOa0u+WKqOi/nuaOpeeahCB0b2tlbgogICAgICBoZWFydGJlYXRUaW1lcjogbnVsbAogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBpc0FkbWluKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUudXNlciAmJiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLmlzX2FkbWluOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgbG9hZFNlcnZlcnMoKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmF4aW9zLmdldCgnL2FwaS9zZXJ2ZXJzJyk7CiAgICAgICAgdGhpcy5zZXJ2ZXJzID0gcmVzcG9uc2UuZGF0YTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfojrflj5bmnI3liqHlmajliJfooajlpLHotKUnKTsKICAgICAgfQogICAgfSwKICAgIHNob3dBZGREaWFsb2coKSB7CiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWU7CiAgICAgIHRoaXMuc2VydmVyRm9ybSA9IHsKICAgICAgICBuYW1lOiAnJywKICAgICAgICBpcDogJycsCiAgICAgICAgdHlwZTogJ1dpbmRvd3MnLAogICAgICAgIHVzZXJuYW1lOiAnJywKICAgICAgICBwYXNzd29yZDogJycKICAgICAgfTsKICAgIH0sCiAgICBhc3luYyBzdWJtaXRGb3JtKCkgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IHZhbGlkID0gYXdhaXQgdGhpcy4kcmVmcy5zZXJ2ZXJGb3JtLnZhbGlkYXRlKCk7CiAgICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgICBhd2FpdCB0aGlzLmF4aW9zLnBvc3QoJy9hcGkvc2VydmVycycsIHRoaXMuc2VydmVyRm9ybSk7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MoJ+a3u+WKoOacjeWKoeWZqOaIkOWKnycpOwogICAgICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2U7CiAgICAgICAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+a3u+WKoOacjeWKoeWZqOWksei0pScpOwogICAgICB9CiAgICB9LAogICAgYXN5bmMgZGVsZXRlU2VydmVyKHNlcnZlcikgewogICAgICB0cnkgewogICAgICAgIGF3YWl0IHRoaXMuJGNvbmZpcm0oJ+ehruiupOWIoOmZpOivpeacjeWKoeWZqD8nLCAn5o+Q56S6JywgewogICAgICAgICAgdHlwZTogJ3dhcm5pbmcnCiAgICAgICAgfSk7CiAgICAgICAgYXdhaXQgdGhpcy5heGlvcy5kZWxldGUoYC9hcGkvc2VydmVycy8ke3NlcnZlci5pZH1gKTsKICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MoJ+WIoOmZpOaIkOWKnycpOwogICAgICAgIHRoaXMubG9hZFNlcnZlcnMoKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBpZiAoZXJyb3IgIT09ICdjYW5jZWwnKSB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfliKDpmaTlpLHotKUnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBhc3luYyBjb25uZWN0U2VydmVyKHNlcnZlcikgewogICAgICB0cnkgewogICAgICAgIGlmIChzZXJ2ZXIudHlwZSA9PT0gJ1dpbmRvd3MnKSB7CiAgICAgICAgICAvLyDojrflj5bmnI3liqHlmajlr4bnoIEKICAgICAgICAgIGNvbnN0IHBhc3N3b3JkUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmF4aW9zLmdldChgL2FwaS9zZXJ2ZXJzLyR7c2VydmVyLmlkfS9wYXNzd29yZGApOwogICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBwYXNzd29yZFJlc3BvbnNlLmRhdGEucGFzc3dvcmQ7CgogICAgICAgICAgLy8g5Y+R6LW3IFJEUCDov57mjqUKICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5heGlvcy5wb3N0KCcvYXBpL3JkcC9jb25uZWN0JywgewogICAgICAgICAgICBzZXJ2ZXJfaWQ6IHNlcnZlci5pZCwKICAgICAgICAgICAgdXNlcm5hbWU6IHNlcnZlci51c2VybmFtZSwKICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkCiAgICAgICAgICB9KTsKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKCdSRFAg6L+e5o6l6K+35rGC5bey5Y+R6YCBJyk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIExpbnV4IFNTSCDov57mjqUKICAgICAgICAgIGF3YWl0IHRoaXMuY29ubmVjdFNTSChzZXJ2ZXIpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfov57mjqXlpLHotKXvvJonICsgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmRhdGEgPyBlcnJvci5yZXNwb25zZS5kYXRhLmVycm9yIDogZXJyb3IubWVzc2FnZSkpOwogICAgICB9CiAgICB9LAogICAgYXN5bmMgY29ubmVjdFNTSChzZXJ2ZXIpIHsKICAgICAgdGhpcy5zc2hWaXNpYmxlID0gdHJ1ZTsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIGlmICghdGhpcy50ZXJtaW5hbCkgewogICAgICAgICAgdGhpcy50ZXJtaW5hbCA9IG5ldyBUZXJtaW5hbCgpOwogICAgICAgICAgY29uc3QgZml0QWRkb24gPSBuZXcgRml0QWRkb24oKTsKICAgICAgICAgIHRoaXMudGVybWluYWwubG9hZEFkZG9uKGZpdEFkZG9uKTsKICAgICAgICAgIHRoaXMudGVybWluYWwub3Blbihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVybWluYWwnKSk7CiAgICAgICAgICBmaXRBZGRvbi5maXQoKTsKCiAgICAgICAgICAvLyDojrflj5bmnI3liqHlmajlr4bnoIEKICAgICAgICAgIHRoaXMuYXhpb3MuZ2V0KGAvYXBpL3NlcnZlcnMvJHtzZXJ2ZXIuaWR9L3Bhc3N3b3JkYCkudGhlbihwYXNzd29yZFJlc3BvbnNlID0+IHsKICAgICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBwYXNzd29yZFJlc3BvbnNlLmRhdGEucGFzc3dvcmQ7CgogICAgICAgICAgICAvLyDkvb/nlKggU29ja2V0LklPIOi/nuaOpSBTU0gKICAgICAgICAgICAgY29uc3Qgc29ja2V0ID0gaW8oJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMCcpOwogICAgICAgICAgICBzb2NrZXQuZW1pdCgnY29ubmVjdF9zc2gnLCB7CiAgICAgICAgICAgICAgaG9zdDogc2VydmVyLmlwLAogICAgICAgICAgICAgIHVzZXJuYW1lOiBzZXJ2ZXIudXNlcm5hbWUsCiAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzb2NrZXQub24oJ3NzaF9vdXRwdXQnLCBkYXRhID0+IHsKICAgICAgICAgICAgICB0aGlzLnRlcm1pbmFsLndyaXRlKGRhdGEuZGF0YSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzb2NrZXQub24oJ3NzaF9lcnJvcicsIGRhdGEgPT4gewogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoZGF0YS5lcnJvcik7CiAgICAgICAgICAgICAgdGhpcy5zc2hWaXNpYmxlID0gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzb2NrZXQub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy5zc2hWaXNpYmxlID0gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0aGlzLnRlcm1pbmFsLm9uRGF0YShkYXRhID0+IHsKICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgnc3NoX2lucHV0JywgZGF0YSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfojrflj5bmnI3liqHlmajlr4bnoIHlpLHotKUnKTsKICAgICAgICAgICAgdGhpcy5zc2hWaXNpYmxlID0gZmFsc2U7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMubG9hZFNlcnZlcnMoKTsKICAgIC8vIOWumuacn+WIt+aWsOacjeWKoeWZqOWIl+ihqAogICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7CiAgICB9LCA1MDAwKTsKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICBpZiAodGhpcy50ZXJtaW5hbCkgewogICAgICB0aGlzLnRlcm1pbmFsLmRpc3Bvc2UoKTsKICAgIH0KICB9Cn07"},{"version":3,"names":["Terminal","FitAddon","io","data","servers","dialogVisible","sshVisible","terminal","serverForm","name","ip","type","username","password","rules","required","message","trigger","activeConnections","heartbeatTimer","computed","isAdmin","$store","state","user","is_admin","methods","loadServers","response","axios","get","error","$message","showAddDialog","submitForm","valid","$refs","validate","post","success","deleteServer","server","$confirm","delete","id","connectServer","passwordResponse","server_id","connectSSH","$nextTick","fitAddon","loadAddon","open","document","getElementById","fit","then","socket","emit","host","on","write","onData","catch","mounted","setInterval","beforeDestroy","dispose"],"sources":["src/components/ServerList.vue"],"sourcesContent":["<template>\r\n  <div class=\"server-list\">\r\n    <!-- 只有管理员才能看到添加服务器按钮 -->\r\n    <div class=\"toolbar\" v-if=\"isAdmin\">\r\n      <el-button type=\"primary\" @click=\"showAddDialog\">\r\n        <i class=\"el-icon-plus\"></i> 添加服务器\r\n      </el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"servers\" style=\"width: 100%\">\r\n      <el-table-column prop=\"name\" label=\"名称\" />\r\n      <el-table-column prop=\"ip\" label=\"IP地址\" />\r\n      <el-table-column prop=\"type\" label=\"类型\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n            {{ scope.row.type }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag v-if=\"scope.row.in_use\"\r\n                  :type=\"scope.row.in_use_by_me ? 'warning' : 'danger'\">\r\n            {{ scope.row.in_use_by_me ? '我正在使用中' : `${scope.row.in_use_by_username} 正在使用中` }}\r\n          </el-tag>\r\n          <el-tag v-else type=\"success\">空闲</el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"250\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button \r\n            type=\"primary\" \r\n            size=\"small\" \r\n            @click=\"connectServer(scope.row)\"\r\n            :disabled=\"scope.row.in_use && !scope.row.in_use_by_me\"\r\n            :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n            {{ scope.row.type === 'Windows' ? 'RDP连接' : 'SSH连接' }}\r\n          </el-button>\r\n          <!-- 只有管理员才能看到删除按钮 -->\r\n          <el-button\r\n            v-if=\"isAdmin\"\r\n            type=\"danger\"\r\n            size=\"small\"\r\n            @click=\"deleteServer(scope.row)\"\r\n          >\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 添加服务器对话框 -->\r\n    <el-dialog title=\"添加服务器\" :visible.sync=\"dialogVisible\">\r\n      <el-form :model=\"serverForm\" ref=\"serverForm\" :rules=\"rules\">\r\n        <el-form-item label=\"名称\" prop=\"name\">\r\n          <el-input v-model=\"serverForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"IP地址\" prop=\"ip\">\r\n          <el-input v-model=\"serverForm.ip\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"类型\" prop=\"type\">\r\n          <el-select v-model=\"serverForm.type\">\r\n            <el-option label=\"Windows\" value=\"Windows\"></el-option>\r\n            <el-option label=\"Linux\" value=\"Linux\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"serverForm.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input type=\"password\" v-model=\"serverForm.password\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitForm\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- SSH终端窗口 -->\r\n    <el-dialog title=\"SSH终端\" :visible.sync=\"sshVisible\" fullscreen>\r\n      <div id=\"terminal\" class=\"terminal\"></div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Terminal } from 'xterm';\r\nimport { FitAddon } from 'xterm-addon-fit';\r\nimport io from 'socket.io-client';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      servers: [],\r\n      dialogVisible: false,\r\n      sshVisible: false,\r\n      terminal: null,\r\n      serverForm: {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        username: '',\r\n        password: ''\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: '请输入服务器名称', trigger: 'blur' }],\r\n        ip: [{ required: true, message: '请输入IP地址', trigger: 'blur' }],\r\n        type: [{ required: true, message: '请选择服务器类型', trigger: 'change' }],\r\n        username: [{ required: true, message: '请输入用户名', trigger: 'blur' }],\r\n        password: [{ required: true, message: '请输入密码', trigger: 'blur' }]\r\n      },\r\n      activeConnections: {},  // 存储活动连接的 token\r\n      heartbeatTimer: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    isAdmin() {\r\n      return this.$store.state.user && this.$store.state.user.is_admin;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async loadServers() {\r\n      try {\r\n        const response = await this.axios.get('/api/servers');\r\n        this.servers = response.data;\r\n      } catch (error) {\r\n        this.$message.error('获取服务器列表失败');\r\n      }\r\n    },\r\n\r\n    showAddDialog() {\r\n      this.dialogVisible = true;\r\n      this.serverForm = {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        username: '',\r\n        password: ''\r\n      };\r\n    },\r\n\r\n    async submitForm() {\r\n      try {\r\n        const valid = await this.$refs.serverForm.validate();\r\n        if (valid) {\r\n          await this.axios.post('/api/servers', this.serverForm);\r\n          this.$message.success('添加服务器成功');\r\n          this.dialogVisible = false;\r\n          this.loadServers();\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('添加服务器失败');\r\n      }\r\n    },\r\n\r\n    async deleteServer(server) {\r\n      try {\r\n        await this.$confirm('确认删除该服务器?', '提示', {\r\n          type: 'warning'\r\n        });\r\n        await this.axios.delete(`/api/servers/${server.id}`);\r\n        this.$message.success('删除成功');\r\n        this.loadServers();\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败');\r\n        }\r\n      }\r\n    },\r\n\r\n    async connectServer(server) {\r\n      try {\r\n        if (server.type === 'Windows') {\r\n          // 获取服务器密码\r\n          const passwordResponse = await this.axios.get(`/api/servers/${server.id}/password`);\r\n          const password = passwordResponse.data.password;\r\n\r\n          // 发起 RDP 连接\r\n          const response = await this.axios.post('/api/rdp/connect', {\r\n            server_id: server.id,\r\n            username: server.username,\r\n            password: password\r\n          });\r\n\r\n          if (response.data.success) {\r\n            this.$message.success('RDP 连接请求已发送');\r\n          }\r\n        } else {\r\n          // Linux SSH 连接\r\n          await this.connectSSH(server);\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('连接失败：' + (error.response && error.response.data ? error.response.data.error : error.message));\r\n\r\n      }\r\n    },\r\n\r\n    async connectSSH(server) {\r\n      this.sshVisible = true;\r\n      this.$nextTick(() => {\r\n        if (!this.terminal) {\r\n          this.terminal = new Terminal();\r\n          const fitAddon = new FitAddon();\r\n          this.terminal.loadAddon(fitAddon);\r\n          this.terminal.open(document.getElementById('terminal'));\r\n          fitAddon.fit();\r\n\r\n          // 获取服务器密码\r\n          this.axios.get(`/api/servers/${server.id}/password`).then(passwordResponse => {\r\n            const password = passwordResponse.data.password;\r\n\r\n            // 使用 Socket.IO 连接 SSH\r\n            const socket = io('http://localhost:5000');\r\n            socket.emit('connect_ssh', {\r\n              host: server.ip,\r\n              username: server.username,\r\n              password: password\r\n            });\r\n\r\n            socket.on('ssh_output', (data) => {\r\n              this.terminal.write(data.data);\r\n            });\r\n\r\n            socket.on('ssh_error', (data) => {\r\n              this.$message.error(data.error);\r\n              this.sshVisible = false;\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n              this.sshVisible = false;\r\n            });\r\n\r\n            this.terminal.onData(data => {\r\n              socket.emit('ssh_input', data);\r\n            });\r\n          }).catch(error => {\r\n            this.$message.error('获取服务器密码失败');\r\n            this.sshVisible = false;\r\n          });\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.loadServers();\r\n    // 定期刷新服务器列表\r\n    setInterval(() => {\r\n      this.loadServers();\r\n    }, 5000);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.terminal) {\r\n      this.terminal.dispose();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.server-list {\r\n  padding: 20px;\r\n}\r\n.toolbar {\r\n  margin-bottom: 20px;\r\n}\r\n.terminal {\r\n  height: 100%;\r\n  background: #000;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]}]}