{"remainingRequest":"E:\\yunwei\\1.0\\2.0\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\yunwei\\1.0\\2.0\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\yunwei\\1.0\\2.0\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\yunwei\\1.0\\2.0\\frontend\\src\\components\\ServerList.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\yunwei\\1.0\\2.0\\frontend\\src\\components\\ServerList.vue","mtime":1742799731587},{"path":"E:\\yunwei\\1.0\\2.0\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1740710845061},{"path":"E:\\yunwei\\1.0\\2.0\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1740710847398},{"path":"E:\\yunwei\\1.0\\2.0\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1740710845061},{"path":"E:\\yunwei\\1.0\\2.0\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1740710848685}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["data","servers","dialogVisible","serverForm","name","ip","type","port","username","password","rules","required","message","trigger","validator","rule","value","callback","Error","isEdit","activeConnections","heartbeatTimer","refreshInterval","categories","selectedCategory","categoryTree","id","label","defaultProps","children","editingServerId","computed","isAdmin","$store","state","user","is_admin","isLoggedIn","filteredServers","filter","server","category_id","methods","updateDefaultPort","loadServers","response","axios","get","error","$message","showAddDialog","showEditDialog","loadCategories","map","category","submitForm","valid","$refs","validate","put","success","errorMsg","console","post","deleteServer","$confirm","delete","connectServer","passwordResponse","server_id","connectSSH","handleNodeClick","created","setInterval","beforeDestroy","clearInterval"],"sources":["src/components/ServerList.vue"],"sourcesContent":["<template>\r\n  <div class=\"server-list-container\">\r\n    <!-- 左侧分类树 -->\r\n    <div class=\"category-tree\">\r\n      <el-tree\r\n        :data=\"categoryTree\"\r\n        :props=\"defaultProps\"\r\n        @node-click=\"handleNodeClick\"\r\n        default-expand-all\r\n        highlight-current>\r\n      </el-tree>\r\n    </div>\r\n\r\n    <!-- 右侧服务器列表 -->\r\n    <div class=\"server-list\">\r\n      <!-- 只有管理员才能看到添加服务器按钮 -->\r\n      <div class=\"toolbar\" v-if=\"isAdmin\">\r\n        <el-button type=\"primary\" @click=\"showAddDialog\">\r\n          <i class=\"el-icon-plus\"></i> 添加服务器\r\n        </el-button>\r\n      </div>\r\n\r\n      <el-table :data=\"filteredServers\" style=\"width: 100%\">\r\n        <el-table-column prop=\"name\" label=\"名称\" min-width=\"120\" />\r\n        <el-table-column prop=\"ip\" label=\"IP地址\" min-width=\"140\" />\r\n        <el-table-column prop=\"type\" label=\"类型\" width=\"100\" align=\"center\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag \r\n              :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\"\r\n              size=\"medium\"\r\n              effect=\"plain\">\r\n              {{ scope.row.type }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"状态\" width=\"150\" align=\"center\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag \r\n              v-if=\"scope.row.in_use\"\r\n              :type=\"scope.row.in_use_by_me ? 'warning' : 'danger'\"\r\n              size=\"medium\"\r\n              effect=\"plain\">\r\n              {{ scope.row.in_use_by_me ? '我正在使用中' : `${scope.row.in_use_by_username} 正在使用中` }}\r\n            </el-tag>\r\n            <el-tag \r\n              v-else \r\n              type=\"success\"\r\n              size=\"medium\"\r\n              effect=\"plain\">\r\n              空闲\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"280\" align=\"center\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button \r\n              type=\"primary\" \r\n              size=\"mini\" \r\n              @click=\"connectServer(scope.row)\"\r\n              :disabled=\"scope.row.in_use && !scope.row.in_use_by_me\"\r\n              :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\"\r\n              plain>\r\n              <i :class=\"scope.row.type === 'Windows' ? 'el-icon-monitor' : 'el-icon-terminal'\"></i>\r\n              {{ scope.row.type === 'Windows' ? 'RDP连接' : 'SSH连接' }}\r\n            </el-button>\r\n            <el-button\r\n              v-if=\"isAdmin\"\r\n              type=\"warning\"\r\n              size=\"mini\"\r\n              @click=\"showEditDialog(scope.row)\"\r\n              plain>\r\n              <i class=\"el-icon-edit\"></i>\r\n              编辑\r\n            </el-button>\r\n            <el-button\r\n              v-if=\"isAdmin\"\r\n              type=\"danger\"\r\n              size=\"mini\"\r\n              @click=\"deleteServer(scope.row)\"\r\n              plain>\r\n              <i class=\"el-icon-delete\"></i>\r\n              删除\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 添加/编辑服务器对话框 -->\r\n      <el-dialog \r\n        :title=\"isEdit ? '编辑服务器' : '添加服务器'\" \r\n        :visible.sync=\"dialogVisible\" \r\n        width=\"600px\"\r\n        custom-class=\"server-dialog\"\r\n        :close-on-click-modal=\"false\">\r\n        <el-form \r\n          :model=\"serverForm\" \r\n          ref=\"serverForm\" \r\n          :rules=\"rules\"\r\n          label-width=\"80px\"\r\n          class=\"server-form\">\r\n          <div class=\"form-row\">\r\n            <el-form-item label=\"名称\" prop=\"name\" class=\"form-item\">\r\n              <el-input v-model=\"serverForm.name\" placeholder=\"请输入服务器名称\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"IP地址\" prop=\"ip\" class=\"form-item\">\r\n              <el-input v-model=\"serverForm.ip\" placeholder=\"请输入IP地址\"></el-input>\r\n            </el-form-item>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <el-form-item label=\"类型\" prop=\"type\" class=\"form-item\">\r\n              <el-select v-model=\"serverForm.type\" placeholder=\"请选择服务器类型\" style=\"width: 100%\" @change=\"updateDefaultPort\">\r\n                <el-option label=\"Windows\" value=\"Windows\"></el-option>\r\n                <el-option label=\"Linux\" value=\"Linux\"></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"端口\" prop=\"port\" class=\"form-item\">\r\n              <el-input v-model.number=\"serverForm.port\" type=\"number\" placeholder=\"请输入端口号\"></el-input>\r\n            </el-form-item>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <el-form-item label=\"用户名\" prop=\"username\" class=\"form-item\">\r\n              <el-input v-model=\"serverForm.username\" placeholder=\"请输入用户名\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"密码\" prop=\"password\" class=\"form-item\">\r\n              <el-input \r\n                type=\"password\" \r\n                v-model=\"serverForm.password\" \r\n                :placeholder=\"isEdit ? '不修改请留空' : '请输入密码'\" \r\n                show-password>\r\n              </el-input>\r\n            </el-form-item>\r\n          </div>\r\n        </el-form>\r\n        <div slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\r\n        </div>\r\n      </el-dialog>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      servers: [],\r\n      dialogVisible: false,\r\n      serverForm: {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        port: 22,\r\n        username: '',\r\n        password: ''\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: '请输入服务器名称', trigger: 'blur' }],\r\n        ip: [{ required: true, message: '请输入IP地址', trigger: 'blur' }],\r\n        type: [{ required: true, message: '请选择服务器类型', trigger: 'change' }],\r\n        port: [\r\n          { required: true, message: '请输入端口号', trigger: 'blur' },\r\n          { type: 'number', message: '端口必须为数字', trigger: 'blur' },\r\n          { validator: (rule, value, callback) => {\r\n              if (value < 1 || value > 65535) {\r\n                callback(new Error('端口号必须在1-65535之间'));\r\n              } else {\r\n                callback();\r\n              }\r\n            }, \r\n            trigger: 'blur' \r\n          }\r\n        ],\r\n        username: [{ required: true, message: '请输入用户名', trigger: 'blur' }],\r\n        password: [{ \r\n          validator: (rule, value, callback) => {\r\n            if (!this.isEdit && !value) {\r\n              callback(new Error('请输入密码'));\r\n            } else {\r\n              callback();\r\n            }\r\n          },\r\n          trigger: 'blur' \r\n        }]\r\n      },\r\n      activeConnections: {},  // 存储活动连接的 token\r\n      heartbeatTimer: null,\r\n      refreshInterval: null,\r\n      categories: [],\r\n      selectedCategory: null,\r\n      categoryTree: [{\r\n        id: 'all',\r\n        label: '全部服务器'\r\n      }],\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'label'\r\n      },\r\n      isEdit: false,\r\n      editingServerId: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    isAdmin() {\r\n      return this.$store.state.user && this.$store.state.user.is_admin;\r\n    },\r\n    isLoggedIn() {\r\n      return this.$store.state.user !== null;\r\n    },\r\n    filteredServers() {\r\n      if (!this.selectedCategory || this.selectedCategory.id === 'all') {\r\n        return this.servers;\r\n      }\r\n      \r\n      // 根据选中的分类筛选服务器\r\n      return this.servers.filter(server => {\r\n        return server.category_id === this.selectedCategory.id;\r\n      });\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    updateDefaultPort() {\r\n      // 根据服务器类型更新默认端口\r\n      if (this.serverForm.type === 'Windows') {\r\n        this.serverForm.port = 3389;\r\n      } else if (this.serverForm.type === 'Linux') {\r\n        this.serverForm.port = 22;\r\n      }\r\n    },\r\n    \r\n    async loadServers() {\r\n      // 如果未登录，不加载服务器列表\r\n      if (!this.isLoggedIn) {\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const response = await this.axios.get('/api/servers');\r\n        this.servers = response.data;\r\n      } catch (error) {\r\n        // 只在登录状态下显示错误消息\r\n        if (this.isLoggedIn) {\r\n          this.$message.error('获取服务器列表失败');\r\n        }\r\n      }\r\n    },\r\n\r\n    showAddDialog() {\r\n      this.isEdit = false;\r\n      this.editingServerId = null;\r\n      this.dialogVisible = true;\r\n      this.serverForm = {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        port: 3389, // 默认为Windows RDP端口\r\n        username: '',\r\n        password: ''\r\n      };\r\n    },\r\n\r\n    showEditDialog(server) {\r\n      this.isEdit = true;\r\n      this.editingServerId = server.id;\r\n      this.dialogVisible = true;\r\n      this.serverForm = {\r\n        name: server.name,\r\n        ip: server.ip,\r\n        type: server.type,\r\n        port: server.port || (server.type === 'Windows' ? 3389 : 22), // 根据类型设置默认端口\r\n        username: server.username,\r\n        password: '', // 编辑时密码为空\r\n      };\r\n    },\r\n\r\n    async loadCategories() {\r\n      try {\r\n        const response = await this.axios.get('/api/categories');\r\n        this.categories = response.data;\r\n        // 更新分类树\r\n        this.categoryTree = [{\r\n          id: 'all',\r\n          label: '全部服务器'\r\n        }, ...this.categories.map(category => ({\r\n          id: category.id,\r\n          label: category.name\r\n        }))];\r\n      } catch (error) {\r\n        this.$message.error('获取分类列表失败');\r\n      }\r\n    },\r\n\r\n    async submitForm() {\r\n      try {\r\n        const valid = await this.$refs.serverForm.validate();\r\n        if (valid) {\r\n          if (this.isEdit) {\r\n            // 更新服务器\r\n            try {\r\n              const response = await this.axios.put(`/api/servers/${this.editingServerId}`, this.serverForm);\r\n              if (response.data) {\r\n                this.$message.success('更新服务器成功');\r\n                this.dialogVisible = false;\r\n                this.loadServers();\r\n              }\r\n            } catch (error) {\r\n              const errorMsg = error.response && error.response.data && error.response.data.error \r\n                ? error.response.data.error \r\n                : '未知错误';\r\n              this.$message.error(`更新服务器失败: ${errorMsg}`);\r\n              console.error('更新服务器错误:', error);\r\n            }\r\n          } else {\r\n            // 添加服务器\r\n            try {\r\n              await this.axios.post('/api/servers', this.serverForm);\r\n              this.$message.success('添加服务器成功');\r\n              this.dialogVisible = false;\r\n              this.loadServers();\r\n            } catch (error) {\r\n              const errorMsg = error.response && error.response.data && error.response.data.error \r\n                ? error.response.data.error \r\n                : '未知错误';\r\n              this.$message.error(`添加服务器失败: ${errorMsg}`);\r\n              console.error('添加服务器错误:', error);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('表单验证错误:', error);\r\n        this.$message.error('表单验证失败，请检查输入');\r\n      }\r\n    },\r\n\r\n    async deleteServer(server) {\r\n      try {\r\n        await this.$confirm('确认删除该服务器?', '提示', {\r\n          type: 'warning'\r\n        });\r\n        await this.axios.delete(`/api/servers/${server.id}`);\r\n        this.$message.success('删除成功');\r\n        this.loadServers();\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败');\r\n        }\r\n      }\r\n    },\r\n\r\n    async connectServer(server) {\r\n      try {\r\n        if (server.type === 'Windows') {\r\n          // 获取服务器密码\r\n          const passwordResponse = await this.axios.get(`/api/servers/${server.id}/password`);\r\n          const password = passwordResponse.data.password;\r\n\r\n          // 发起 RDP 连接\r\n          const response = await this.axios.post('/api/rdp/connect', {\r\n            server_id: server.id,\r\n            username: server.username,\r\n            password: password\r\n          });\r\n\r\n          if (response.data.success) {\r\n            this.$message.success('RDP 连接请求已发送');\r\n          }\r\n        } else {\r\n          // Linux SSH 连接\r\n          await this.connectSSH(server);\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('连接失败：' + (error.response && error.response.data ? error.response.data.error : error.message));\r\n      }\r\n    },\r\n\r\n    async connectSSH(server) {\r\n      try {\r\n        // 通过后端API发起SSH连接请求\r\n        const response = await this.axios.post('/api/ssh/connect', {\r\n          server_id: server.id\r\n        });\r\n        \r\n        if (response.data.success) {\r\n          this.$message.success('SSH 连接请求已发送');\r\n        } else {\r\n          throw new Error(response.data.error || '启动SSH连接失败');\r\n        }\r\n      } catch (error) {\r\n        console.error('SSH连接错误:', error);\r\n        this.$message.error('SSH连接失败：' + (error.response && error.response.data ? error.response.data.error : error.message));\r\n      }\r\n    },\r\n\r\n    handleNodeClick(data) {\r\n      this.selectedCategory = data;\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.loadCategories();  // 加载分类列表\r\n    this.loadServers();\r\n    // 每30秒刷新一次服务器列表\r\n    this.refreshInterval = setInterval(() => {\r\n      if (this.isLoggedIn) {\r\n        this.loadServers();\r\n        this.loadCategories();  // 同时刷新分类列表\r\n      }\r\n    }, 30000);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n    if (this.heartbeatTimer) {\r\n      clearInterval(this.heartbeatTimer);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.server-list-container {\r\n  display: flex;\r\n  height: 100%;\r\n  padding: 20px;\r\n  gap: 20px;\r\n}\r\n\r\n.category-tree {\r\n  width: 250px;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n}\r\n\r\n.server-list {\r\n  flex: 1;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n}\r\n\r\n.toolbar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.terminal {\r\n  height: 100%;\r\n  background: #000;\r\n}\r\n\r\n/* 添加服务器对话框样式 */\r\n.server-dialog {\r\n  border-radius: 8px;\r\n}\r\n\r\n.server-form {\r\n  padding: 20px 20px 0;\r\n}\r\n\r\n.form-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n  margin-bottom: 22px;\r\n}\r\n\r\n.form-item {\r\n  flex: 1;\r\n  margin-bottom: 0;\r\n}\r\n\r\n.dialog-footer {\r\n  text-align: right;\r\n  padding: 10px 20px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n:deep(.el-dialog__body) {\r\n  padding: 0;\r\n}\r\n\r\n:deep(.el-dialog__header) {\r\n  padding: 20px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n:deep(.el-dialog__title) {\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.el-form-item__label) {\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.el-input__inner) {\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 表格样式优化 */\r\n:deep(.el-table) {\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n:deep(.el-table th) {\r\n  background-color: #f5f7fa !important;\r\n  color: #606266;\r\n  font-weight: 600;\r\n  height: 50px;\r\n  padding: 8px 0;\r\n}\r\n\r\n:deep(.el-table td) {\r\n  padding: 12px 0;\r\n}\r\n\r\n:deep(.el-table--enable-row-hover .el-table__body tr:hover > td) {\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n/* 标签样式优化 */\r\n:deep(.el-tag) {\r\n  border-radius: 4px;\r\n  padding: 0 12px;\r\n  height: 28px;\r\n  line-height: 26px;\r\n  font-size: 13px;\r\n}\r\n\r\n/* 按钮样式优化 */\r\n:deep(.el-button--mini) {\r\n  padding: 7px 12px;\r\n  font-size: 12px;\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.el-button--mini i) {\r\n  margin-right: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 分类树样式优化 */\r\n:deep(.el-tree) {\r\n  background: none;\r\n  color: #606266;\r\n}\r\n\r\n:deep(.el-tree-node__content) {\r\n  height: 40px;\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.el-tree-node__content:hover) {\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n:deep(.el-tree-node.is-current > .el-tree-node__content) {\r\n  background-color: #ecf5ff;\r\n  color: #409EFF;\r\n}\r\n\r\n/* 工具栏样式 */\r\n.toolbar {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.toolbar .el-button {\r\n  padding: 10px 20px;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.toolbar .el-button i {\r\n  margin-right: 6px;\r\n  font-size: 16px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]}]}