{"remainingRequest":"D:\\gatekeeper\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\gatekeeper\\frontend\\src\\components\\Dashboard.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\gatekeeper\\frontend\\src\\components\\Dashboard.vue","mtime":1751424519770},{"path":"D:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747724956321},{"path":"D:\\gatekeeper\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1747724958365},{"path":"D:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747724956321},{"path":"D:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747724959585}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0ICogYXMgZWNoYXJ0cyBmcm9tICdlY2hhcnRzJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEYXNoYm9hcmQnLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBkYXNoYm9hcmREYXRhOiB7CiAgICAgICAgdG90YWxfc2VydmVyczogMCwKICAgICAgICB0b3RhbF91c2VyczogMCwKICAgICAgICB0b2RheV9hY3Rpdml0aWVzOiAwLAogICAgICAgIGFsZXJ0czogMCwKICAgICAgICBzZXJ2ZXJfdHlwZV9kaXN0cmlidXRpb246IHt9LAogICAgICAgIGFjdGl2aXR5X3RyZW5kOiBbXSwKICAgICAgICByZWNlbnRfYWN0aXZpdGllczogW10KICAgICAgfSwKICAgICAgYXNzZXRUeXBlQ2hhcnQ6IG51bGwsCiAgICAgIGFjdGl2aXR5VHJlbmRDaGFydDogbnVsbCwKICAgICAgcmVmcmVzaEludGVydmFsOiBudWxsCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuZmV0Y2hEYXNoYm9hcmREYXRhKCk7CiAgICAvLyDmr482MOenkuWIt+aWsOS4gOasoeaVsOaNrgogICAgdGhpcy5yZWZyZXNoSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgIHRoaXMuZmV0Y2hEYXNoYm9hcmREYXRhKCk7CiAgICB9LCA2MDAwMCk7CgogICAgLy8g55uR5ZCs56qX5Y+j5aSn5bCP5Y+Y5YyW77yM6YeN5paw6LCD5pW05Zu+6KGo5aSn5bCPCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZXNpemVDaGFydHMpOwogIH0sCiAgYmVmb3JlRGVzdHJveSgpIHsKICAgIC8vIOe7hOS7tumUgOavgeWJjea4hemZpOWumuaXtuWZqAogICAgaWYgKHRoaXMucmVmcmVzaEludGVydmFsKSB7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZyZXNoSW50ZXJ2YWwpOwogICAgfQoKICAgIC8vIOenu+mZpOS6i+S7tuebkeWQrAogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplQ2hhcnRzKTsKCiAgICAvLyDplIDmr4Hlm77ooajlrp7kvosKICAgIGlmICh0aGlzLmFzc2V0VHlwZUNoYXJ0KSB7CiAgICAgIHRoaXMuYXNzZXRUeXBlQ2hhcnQuZGlzcG9zZSgpOwogICAgfQogICAgaWYgKHRoaXMuYWN0aXZpdHlUcmVuZENoYXJ0KSB7CiAgICAgIHRoaXMuYWN0aXZpdHlUcmVuZENoYXJ0LmRpc3Bvc2UoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGFzeW5jIGZldGNoRGFzaGJvYXJkRGF0YSgpIHsKICAgICAgdHJ5IHsKICAgICAgICAvLyDkvb/nlKjnnJ/lrp5BUEnosIPnlKjojrflj5bmlbDmja4KICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCgnL2FwaS9kYXNoYm9hcmQvc3RhdHMnKTsKICAgICAgICB0aGlzLmRhc2hib2FyZERhdGEgPSByZXNwb25zZS5kYXRhOwogICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgIHRoaXMuaW5pdENoYXJ0cygpOwogICAgICAgIH0pOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ+iOt+WPluS7quihqOebmOaVsOaNruWksei0pTonLCBlcnJvcik7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6I635Y+W5Luq6KGo55uY5pWw5o2u5aSx6LSlJyk7CiAgICAgIH0KICAgIH0sCiAgICBpbml0Q2hhcnRzKCkgewogICAgICB0aGlzLmluaXRBc3NldFR5cGVDaGFydCgpOwogICAgICB0aGlzLmluaXRBY3Rpdml0eVRyZW5kQ2hhcnQoKTsKICAgIH0sCiAgICBpbml0QXNzZXRUeXBlQ2hhcnQoKSB7CiAgICAgIC8vIOWIneWni+WMlui1hOS6p+exu+Wei+WIhuW4g+WbvuihqAogICAgICBjb25zdCBjaGFydERvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhc3NldC10eXBlLWNoYXJ0Jyk7CiAgICAgIGlmICghY2hhcnREb20pIHJldHVybjsKICAgICAgdGhpcy5hc3NldFR5cGVDaGFydCA9IGVjaGFydHMuaW5pdChjaGFydERvbSk7CiAgICAgIGNvbnN0IGRhdGEgPSBbXTsKICAgICAgY29uc3QgdHlwZU1hcCA9IHsKICAgICAgICAnV2luZG93cyc6ICdXaW5kb3dzIOacjeWKoeWZqCcsCiAgICAgICAgJ0xpbnV4JzogJ0xpbnV4IOacjeWKoeWZqCcsCiAgICAgICAgJ05ldHdvcmsnOiAn572R57uc6K6+5aSHJywKICAgICAgICAnT3RoZXInOiAn5YW25LuWJwogICAgICB9OwogICAgICBmb3IgKGNvbnN0IFt0eXBlLCBjb3VudF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5kYXNoYm9hcmREYXRhLnNlcnZlcl90eXBlX2Rpc3RyaWJ1dGlvbikpIHsKICAgICAgICBkYXRhLnB1c2goewogICAgICAgICAgdmFsdWU6IGNvdW50LAogICAgICAgICAgbmFtZTogdHlwZU1hcFt0eXBlXSB8fCB0eXBlCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIHRyaWdnZXI6ICdpdGVtJywKICAgICAgICAgIGZvcm1hdHRlcjogJ3thfSA8YnIvPntifToge2N9ICh7ZH0lKScKICAgICAgICB9LAogICAgICAgIGxlZ2VuZDogewogICAgICAgICAgb3JpZW50OiAndmVydGljYWwnLAogICAgICAgICAgbGVmdDogMTAsCiAgICAgICAgICBkYXRhOiBkYXRhLm1hcChpdGVtID0+IGl0ZW0ubmFtZSkKICAgICAgICB9LAogICAgICAgIHNlcmllczogW3sKICAgICAgICAgIG5hbWU6ICfotYTkuqfnsbvlnosnLAogICAgICAgICAgdHlwZTogJ3BpZScsCiAgICAgICAgICByYWRpdXM6IFsnNTAlJywgJzcwJSddLAogICAgICAgICAgYXZvaWRMYWJlbE92ZXJsYXA6IGZhbHNlLAogICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgICAgIHBvc2l0aW9uOiAnY2VudGVyJwogICAgICAgICAgfSwKICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgICBmb250U2l6ZTogJzE4JywKICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIGxhYmVsTGluZTogewogICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICB9XSwKICAgICAgICBjb2xvcjogWycjNDA5RUZGJywgJyM2N0MyM0EnLCAnI0U2QTIzQycsICcjRjU2QzZDJywgJyM5MDkzOTknXQogICAgICB9OwogICAgICB0aGlzLmFzc2V0VHlwZUNoYXJ0LnNldE9wdGlvbihvcHRpb24pOwogICAgfSwKICAgIGluaXRBY3Rpdml0eVRyZW5kQ2hhcnQoKSB7CiAgICAgIC8vIOWIneWni+WMlua0u+WKqOi2i+WKv+WbvuihqAogICAgICBjb25zdCBjaGFydERvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY3Rpdml0eS10cmVuZC1jaGFydCcpOwogICAgICBpZiAoIWNoYXJ0RG9tKSByZXR1cm47CiAgICAgIHRoaXMuYWN0aXZpdHlUcmVuZENoYXJ0ID0gZWNoYXJ0cy5pbml0KGNoYXJ0RG9tKTsKICAgICAgY29uc3QgeEF4aXNEYXRhID0gdGhpcy5kYXNoYm9hcmREYXRhLmFjdGl2aXR5X3RyZW5kLm1hcChpdGVtID0+IGl0ZW0uZGF0ZSk7CiAgICAgIGNvbnN0IHNlcmllc0RhdGEgPSB0aGlzLmRhc2hib2FyZERhdGEuYWN0aXZpdHlfdHJlbmQubWFwKGl0ZW0gPT4gaXRlbS5jb3VudCk7CiAgICAgIGNvbnN0IG9wdGlvbiA9IHsKICAgICAgICB0aXRsZTogewogICAgICAgICAgdGV4dDogJ+i/kTflpKnkvJror53otovlir8nLAogICAgICAgICAgbGVmdDogJ2NlbnRlcicsCiAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgZm9udFNpemU6IDE0LAogICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgdHJpZ2dlcjogJ2F4aXMnLAogICAgICAgICAgYXhpc1BvaW50ZXI6IHsKICAgICAgICAgICAgdHlwZTogJ3NoYWRvdycsCiAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzZhNzk4NScKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZ3JpZDogewogICAgICAgICAgbGVmdDogJzMlJywKICAgICAgICAgIHJpZ2h0OiAnNCUnLAogICAgICAgICAgYm90dG9tOiAnMyUnLAogICAgICAgICAgY29udGFpbkxhYmVsOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB4QXhpczogW3sKICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsCiAgICAgICAgICBkYXRhOiB4QXhpc0RhdGEsCiAgICAgICAgICBheGlzTGFiZWw6IHsKICAgICAgICAgICAgaW50ZXJ2YWw6IDAsCiAgICAgICAgICAgIHJvdGF0ZTogMAogICAgICAgICAgfQogICAgICAgIH1dLAogICAgICAgIHlBeGlzOiBbewogICAgICAgICAgdHlwZTogJ3ZhbHVlJywKICAgICAgICAgIG5hbWU6ICfkvJror53mlbAnCiAgICAgICAgfV0sCiAgICAgICAgc2VyaWVzOiBbewogICAgICAgICAgbmFtZTogJ+S8muivneaVsCcsCiAgICAgICAgICB0eXBlOiAnYmFyJywKICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgIGZvY3VzOiAnc2VyaWVzJwogICAgICAgICAgfSwKICAgICAgICAgIGRhdGE6IHNlcmllc0RhdGEsCiAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgY29sb3I6IG5ldyBlY2hhcnRzLmdyYXBoaWMuTGluZWFyR3JhZGllbnQoMCwgMCwgMCwgMSwgW3sKICAgICAgICAgICAgICBvZmZzZXQ6IDAsCiAgICAgICAgICAgICAgY29sb3I6ICcjODNiZmY2JwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgb2Zmc2V0OiAwLjUsCiAgICAgICAgICAgICAgY29sb3I6ICcjMTg4ZGYwJwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgb2Zmc2V0OiAxLAogICAgICAgICAgICAgIGNvbG9yOiAnIzE4OGRmMCcKICAgICAgICAgICAgfV0pCiAgICAgICAgICB9CiAgICAgICAgfV0KICAgICAgfTsKICAgICAgdGhpcy5hY3Rpdml0eVRyZW5kQ2hhcnQuc2V0T3B0aW9uKG9wdGlvbik7CiAgICB9LAogICAgcmVzaXplQ2hhcnRzKCkgewogICAgICBpZiAodGhpcy5hc3NldFR5cGVDaGFydCkgewogICAgICAgIHRoaXMuYXNzZXRUeXBlQ2hhcnQucmVzaXplKCk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuYWN0aXZpdHlUcmVuZENoYXJ0KSB7CiAgICAgICAgdGhpcy5hY3Rpdml0eVRyZW5kQ2hhcnQucmVzaXplKCk7CiAgICAgIH0KICAgIH0sCiAgICBmb3JtYXRBY3Rpb24oYWN0aW9uKSB7CiAgICAgIGNvbnN0IGFjdGlvbk1hcCA9IHsKICAgICAgICAnbG9naW4nOiAn55m75b2VJywKICAgICAgICAnbG9nb3V0JzogJ+eZu+WHuicsCiAgICAgICAgJ2Nvbm5lY3QnOiAn6L+e5o6lJywKICAgICAgICAnZGlzY29ubmVjdCc6ICfmlq3lvIAnLAogICAgICAgICdsb2dpbl9mYWlsZWQnOiAn55m75b2V5aSx6LSlJywKICAgICAgICAnY29ubmVjdF9mYWlsZWQnOiAn6L+e5o6l5aSx6LSlJwogICAgICB9OwogICAgICByZXR1cm4gYWN0aW9uTWFwW2FjdGlvbl0gfHwgYWN0aW9uOwogICAgfQogIH0KfTs="},{"version":3,"names":["axios","echarts","name","data","dashboardData","total_servers","total_users","today_activities","alerts","server_type_distribution","activity_trend","recent_activities","assetTypeChart","activityTrendChart","refreshInterval","mounted","fetchDashboardData","setInterval","window","addEventListener","resizeCharts","beforeDestroy","clearInterval","removeEventListener","dispose","methods","response","get","$nextTick","initCharts","error","console","$message","initAssetTypeChart","initActivityTrendChart","chartDom","document","getElementById","init","typeMap","type","count","Object","entries","push","value","option","tooltip","trigger","formatter","legend","orient","left","map","item","series","radius","avoidLabelOverlap","label","show","position","emphasis","fontSize","fontWeight","labelLine","color","setOption","xAxisData","date","seriesData","title","text","textStyle","axisPointer","backgroundColor","grid","right","bottom","containLabel","xAxis","axisLabel","interval","rotate","yAxis","focus","itemStyle","graphic","LinearGradient","offset","resize","formatAction","action","actionMap"],"sources":["src/components/Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <h1>仪表盘</h1>\r\n    \r\n    <!-- 统计卡片 -->\r\n    <div class=\"stat-cards\">\r\n      <el-card class=\"stat-card\" shadow=\"hover\">\r\n        <div class=\"stat-card-content\">\r\n          <div class=\"stat-card-value\">{{ dashboardData.total_servers }}</div>\r\n          <div class=\"stat-card-label\">总资产</div>\r\n        </div>\r\n        <div class=\"stat-card-icon\">\r\n          <i class=\"el-icon-monitor\"></i>\r\n        </div>\r\n      </el-card>\r\n      \r\n      <el-card class=\"stat-card\" shadow=\"hover\">\r\n        <div class=\"stat-card-content\">\r\n          <div class=\"stat-card-value\">{{ dashboardData.total_users }}</div>\r\n          <div class=\"stat-card-label\">在线用户</div>\r\n        </div>\r\n        <div class=\"stat-card-icon\">\r\n          <i class=\"el-icon-user\"></i>\r\n        </div>\r\n      </el-card>\r\n      \r\n      <el-card class=\"stat-card\" shadow=\"hover\">\r\n        <div class=\"stat-card-content\">\r\n          <div class=\"stat-card-value\">{{ dashboardData.today_activities }}</div>\r\n          <div class=\"stat-card-label\">今日会话</div>\r\n        </div>\r\n        <div class=\"stat-card-icon\">\r\n          <i class=\"el-icon-data-line\"></i>\r\n        </div>\r\n      </el-card>\r\n      \r\n      <el-card class=\"stat-card\" shadow=\"hover\">\r\n        <div class=\"stat-card-content\">\r\n          <div class=\"stat-card-value\">{{ dashboardData.alerts }}</div>\r\n          <div class=\"stat-card-label\">告警事件</div>\r\n        </div>\r\n        <div class=\"stat-card-icon warning\">\r\n          <i class=\"el-icon-warning\"></i>\r\n        </div>\r\n      </el-card>\r\n    </div>\r\n    \r\n    <!-- 图表区域 -->\r\n    <div class=\"chart-container\">\r\n      <!-- 资产类型分布 -->\r\n      <el-card class=\"chart-card\" shadow=\"hover\">\r\n        <div slot=\"header\" class=\"chart-header\">\r\n          <span>资产类型分布</span>\r\n        </div>\r\n        <div class=\"chart-content\" id=\"asset-type-chart\"></div>\r\n      </el-card>\r\n      \r\n      <!-- 会话趋势 -->\r\n      <el-card class=\"chart-card\" shadow=\"hover\">\r\n        <div slot=\"header\" class=\"chart-header\">\r\n          <span>会话趋势</span>\r\n        </div>\r\n        <div class=\"chart-content\" id=\"activity-trend-chart\"></div>\r\n      </el-card>\r\n    </div>\r\n    \r\n    <!-- 最新活动日志 -->\r\n    <el-card class=\"log-card\" shadow=\"hover\">\r\n      <div slot=\"header\" class=\"log-header\">\r\n        <span>最新活动日志</span>\r\n      </div>\r\n      <div class=\"table-container\">\r\n        <el-table :data=\"dashboardData.recent_activities\" style=\"width: 100%\" stripe>\r\n          <el-table-column prop=\"time\" label=\"时间\" width=\"180\"></el-table-column>\r\n          <el-table-column prop=\"user\" label=\"用户\" width=\"120\"></el-table-column>\r\n          <el-table-column prop=\"action\" label=\"操作\" width=\"120\">\r\n            <template slot-scope=\"scope\">\r\n              <span>{{ formatAction(scope.row.action) }}</span>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"server\" label=\"资产\" width=\"180\"></el-table-column>\r\n          <el-table-column prop=\"ip\" label=\"IP地址\" width=\"140\"></el-table-column>\r\n          <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\r\n            <template slot-scope=\"scope\">\r\n              <el-tag :type=\"scope.row.status === 'success' ? 'success' : 'danger'\" size=\"mini\">\r\n                {{ scope.row.status === 'success' ? '成功' : '失败' }}\r\n              </el-tag>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      dashboardData: {\r\n        total_servers: 0,\r\n        total_users: 0,\r\n        today_activities: 0,\r\n        alerts: 0,\r\n        server_type_distribution: {},\r\n        activity_trend: [],\r\n        recent_activities: []\r\n      },\r\n      assetTypeChart: null,\r\n      activityTrendChart: null,\r\n      refreshInterval: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchDashboardData();\r\n    // 每60秒刷新一次数据\r\n    this.refreshInterval = setInterval(() => {\r\n      this.fetchDashboardData();\r\n    }, 60000);\r\n    \r\n    // 监听窗口大小变化，重新调整图表大小\r\n    window.addEventListener('resize', this.resizeCharts);\r\n  },\r\n  beforeDestroy() {\r\n    // 组件销毁前清除定时器\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n    \r\n    // 移除事件监听\r\n    window.removeEventListener('resize', this.resizeCharts);\r\n    \r\n    // 销毁图表实例\r\n    if (this.assetTypeChart) {\r\n      this.assetTypeChart.dispose();\r\n    }\r\n    if (this.activityTrendChart) {\r\n      this.activityTrendChart.dispose();\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchDashboardData() {\r\n      try {\r\n        // 使用真实API调用获取数据\r\n        const response = await axios.get('/api/dashboard/stats');\r\n        this.dashboardData = response.data;\r\n        \r\n        this.$nextTick(() => {\r\n          this.initCharts();\r\n        });\r\n      } catch (error) {\r\n        console.error('获取仪表盘数据失败:', error);\r\n        this.$message.error('获取仪表盘数据失败');\r\n      }\r\n    },\r\n    \r\n    initCharts() {\r\n      this.initAssetTypeChart();\r\n      this.initActivityTrendChart();\r\n    },\r\n    \r\n    initAssetTypeChart() {\r\n      // 初始化资产类型分布图表\r\n      const chartDom = document.getElementById('asset-type-chart');\r\n      if (!chartDom) return;\r\n      \r\n      this.assetTypeChart = echarts.init(chartDom);\r\n      \r\n      const data = [];\r\n      const typeMap = {\r\n        'Windows': 'Windows 服务器',\r\n        'Linux': 'Linux 服务器',\r\n        'Network': '网络设备',\r\n        'Other': '其他'\r\n      };\r\n      \r\n      for (const [type, count] of Object.entries(this.dashboardData.server_type_distribution)) {\r\n        data.push({\r\n          value: count,\r\n          name: typeMap[type] || type\r\n        });\r\n      }\r\n      \r\n      const option = {\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{a} <br/>{b}: {c} ({d}%)'\r\n        },\r\n        legend: {\r\n          orient: 'vertical',\r\n          left: 10,\r\n          data: data.map(item => item.name)\r\n        },\r\n        series: [\r\n          {\r\n            name: '资产类型',\r\n            type: 'pie',\r\n            radius: ['50%', '70%'],\r\n            avoidLabelOverlap: false,\r\n            label: {\r\n              show: false,\r\n              position: 'center'\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                show: true,\r\n                fontSize: '18',\r\n                fontWeight: 'bold'\r\n              }\r\n            },\r\n            labelLine: {\r\n              show: false\r\n            },\r\n            data: data\r\n          }\r\n        ],\r\n        color: ['#409EFF', '#67C23A', '#E6A23C', '#F56C6C', '#909399']\r\n      };\r\n      \r\n      this.assetTypeChart.setOption(option);\r\n    },\r\n    \r\n    initActivityTrendChart() {\r\n      // 初始化活动趋势图表\r\n      const chartDom = document.getElementById('activity-trend-chart');\r\n      if (!chartDom) return;\r\n      \r\n      this.activityTrendChart = echarts.init(chartDom);\r\n      \r\n      const xAxisData = this.dashboardData.activity_trend.map(item => item.date);\r\n      const seriesData = this.dashboardData.activity_trend.map(item => item.count);\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '近7天会话趋势',\r\n          left: 'center',\r\n          textStyle: {\r\n            fontSize: 14,\r\n            fontWeight: 'normal'\r\n          }\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow',\r\n            label: {\r\n              backgroundColor: '#6a7985'\r\n            }\r\n          }\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            data: xAxisData,\r\n            axisLabel: {\r\n              interval: 0,\r\n              rotate: 0\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: '会话数'\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '会话数',\r\n            type: 'bar',\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: seriesData,\r\n            itemStyle: {\r\n              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                {offset: 0, color: '#83bff6'},\r\n                {offset: 0.5, color: '#188df0'},\r\n                {offset: 1, color: '#188df0'}\r\n              ])\r\n            }\r\n          }\r\n        ]\r\n      };\r\n      \r\n      this.activityTrendChart.setOption(option);\r\n    },\r\n    \r\n    resizeCharts() {\r\n      if (this.assetTypeChart) {\r\n        this.assetTypeChart.resize();\r\n      }\r\n      if (this.activityTrendChart) {\r\n        this.activityTrendChart.resize();\r\n      }\r\n    },\r\n    \r\n    formatAction(action) {\r\n      const actionMap = {\r\n        'login': '登录',\r\n        'logout': '登出',\r\n        'connect': '连接',\r\n        'disconnect': '断开',\r\n        'login_failed': '登录失败',\r\n        'connect_failed': '连接失败'\r\n      };\r\n      \r\n      return actionMap[action] || action;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-container {\r\n  padding: 0;\r\n  width: 100%;\r\n}\r\n\r\n.stat-cards {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.stat-card {\r\n  flex: 1;\r\n  min-width: 220px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n}\r\n\r\n.stat-card-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.stat-card-value {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stat-card-label {\r\n  font-size: 14px;\r\n  color: #909399;\r\n}\r\n\r\n.stat-card-icon {\r\n  font-size: 48px;\r\n  color: #409EFF;\r\n  opacity: 0.7;\r\n}\r\n\r\n.stat-card-icon.warning {\r\n  color: #E6A23C;\r\n}\r\n\r\n.chart-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-card {\r\n  flex: 1;\r\n  min-width: 45%;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.chart-content {\r\n  height: 300px;\r\n}\r\n\r\n.log-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.log-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.table-container {\r\n  width: 100%;\r\n  overflow-x: auto;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .stat-card {\r\n    min-width: 100%;\r\n  }\r\n  \r\n  .chart-card {\r\n    min-width: 100%;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]}]}