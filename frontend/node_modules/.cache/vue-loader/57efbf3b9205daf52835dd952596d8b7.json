{"remainingRequest":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gatekeeper\\frontend\\src\\components\\UserManagement.vue?vue&type=style&index=0&id=2d13e59e&scoped=true&lang=css","dependencies":[{"path":"E:\\gatekeeper\\frontend\\src\\components\\UserManagement.vue","mtime":1740634990181},{"path":"E:\\gatekeeper\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1740710846355},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1740710850033},{"path":"E:\\gatekeeper\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1740710847386},{"path":"E:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1740710845061},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1740710848685}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudXNlci1tYW5hZ2VtZW50IHsNCiAgcGFkZGluZzogMjBweDsNCn0NCg0KLnRvb2xiYXIgew0KICBtYXJnaW4tYm90dG9tOiAyMHB4Ow0KfQ0KDQouZWwtdHJhbnNmZXIgew0KICBtYXJnaW46IDIwcHggMDsNCn0NCg=="},{"version":3,"sources":["UserManagement.vue"],"names":[],"mappings":";AA8NA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"UserManagement.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"user-management\">\r\n    <div class=\"toolbar\">\r\n      <el-button type=\"primary\" @click=\"showAddUserDialog\">\r\n        <i class=\"el-icon-plus\"></i> 添加用户\r\n      </el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"users\" style=\"width: 100%\">\r\n      <el-table-column prop=\"username\" label=\"用户名\"></el-table-column>\r\n      <el-table-column prop=\"is_admin\" label=\"角色\">\r\n        <template slot-scope=\"scope\">\r\n          {{ scope.row.is_admin ? '管理员' : '普通用户' }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"授权服务器\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button size=\"mini\" @click=\"showServerAuthDialog(scope.row)\">\r\n            管理授权\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"200\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button \r\n            size=\"mini\" \r\n            type=\"primary\"\r\n            @click=\"showEditUserDialog(scope.row)\">\r\n            编辑\r\n          </el-button>\r\n          <el-button \r\n            size=\"mini\" \r\n            type=\"danger\" \r\n            @click=\"deleteUser(scope.row)\"\r\n            :disabled=\"scope.row.id === currentUser.id\">\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 添加/编辑用户对话框 -->\r\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"userDialogVisible\">\r\n      <el-form :model=\"userForm\" :rules=\"userRules\" ref=\"userForm\" label-width=\"100px\">\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"userForm.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input type=\"password\" v-model=\"userForm.password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"是否管理员\">\r\n          <el-switch v-model=\"userForm.is_admin\"></el-switch>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"userDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleUserSubmit\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 服务器授权对话框 -->\r\n    <el-dialog title=\"服务器授权\" :visible.sync=\"serverAuthDialogVisible\">\r\n      <el-transfer\r\n        v-model=\"selectedServers\"\r\n        :data=\"allServers\"\r\n        :titles=\"['未授权服务器', '已授权服务器']\"\r\n        :props=\"{\r\n          key: 'id',\r\n          label: 'name'\r\n        }\"\r\n      ></el-transfer>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"serverAuthDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleServerAuth\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      users: [],\r\n      allServers: [],\r\n      selectedServers: [],\r\n      currentUser: null,\r\n      selectedUser: null,\r\n      userDialogVisible: false,\r\n      serverAuthDialogVisible: false,\r\n      userForm: {\r\n        username: '',\r\n        password: '',\r\n        is_admin: false\r\n      },\r\n      userRules: {\r\n        username: [\r\n          { required: true, message: '请输入用户名', trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          { required: true, message: '请输入密码', trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    dialogTitle() {\r\n      return this.selectedUser ? '编辑用户' : '添加用户';\r\n    }\r\n  },\r\n  methods: {\r\n    async loadUsers() {\r\n      try {\r\n        const response = await axios.get('/api/users');\r\n        this.users = response.data;\r\n        // 获取当前用户信息\r\n        const currentUserResponse = await axios.get('/api/users/current');\r\n        this.currentUser = currentUserResponse.data;\r\n      } catch (error) {\r\n        this.$message.error('获取用户列表失败');\r\n      }\r\n    },\r\n    \r\n    async loadServers() {\r\n      try {\r\n        const response = await axios.get('/api/servers');\r\n        this.allServers = response.data;\r\n      } catch (error) {\r\n        this.$message.error('获取服务器列表失败');\r\n      }\r\n    },\r\n    \r\n    showAddUserDialog() {\r\n      this.selectedUser = null;\r\n      this.userForm = {\r\n        username: '',\r\n        password: '',\r\n        is_admin: false\r\n      };\r\n      this.userDialogVisible = true;\r\n    },\r\n    \r\n    showEditUserDialog(user) {\r\n      this.selectedUser = user;\r\n      this.userForm = {\r\n        username: user.username,\r\n        password: '',\r\n        is_admin: user.is_admin\r\n      };\r\n      this.userDialogVisible = true;\r\n    },\r\n    \r\n    async handleUserSubmit() {\r\n      try {\r\n        if (this.selectedUser) {\r\n          // 编辑用户\r\n          await axios.put(`/api/users/${this.selectedUser.id}`, this.userForm);\r\n          this.$message.success('用户更新成功');\r\n        } else {\r\n          // 添加用户\r\n          await axios.post('/api/users', this.userForm);\r\n          this.$message.success('用户添加成功');\r\n        }\r\n        this.userDialogVisible = false;\r\n        this.loadUsers();\r\n      } catch (error) {\r\n        let errorMessage = '操作失败';\r\n        if (error.response && error.response.data && error.response.data.error) {\r\n          errorMessage = error.response.data.error;\r\n        }\r\n        this.$message.error(errorMessage);\r\n      }\r\n    },\r\n    \r\n    async deleteUser(user) {\r\n      try {\r\n        await this.$confirm('确认删除该用户?', '提示', {\r\n          type: 'warning'\r\n        });\r\n        await axios.delete(`/api/users/${user.id}`);\r\n        this.$message.success('删除成功');\r\n        this.loadUsers();\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败');\r\n        }\r\n      }\r\n    },\r\n    \r\n    async showServerAuthDialog(user) {\r\n      this.selectedUser = user;\r\n      this.serverAuthDialogVisible = true;\r\n      try {\r\n        await this.loadServers(); // 加载所有服务器\r\n        const response = await axios.get(`/api/users/${user.id}/servers`);\r\n        this.selectedServers = response.data.map(server => server.id);\r\n      } catch (error) {\r\n        this.$message.error('获取用户服务器授权失败');\r\n      }\r\n    },\r\n    \r\n    async handleServerAuth() {\r\n      try {\r\n        await axios.post(`/api/users/${this.selectedUser.id}/servers`, {\r\n          server_ids: this.selectedServers\r\n        });\r\n        this.$message.success('服务器授权更新成功');\r\n        this.serverAuthDialogVisible = false;\r\n      } catch (error) {\r\n        this.$message.error('更新服务器授权失败');\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.loadUsers();\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.user-management {\r\n  padding: 20px;\r\n}\r\n\r\n.toolbar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.el-transfer {\r\n  margin: 20px 0;\r\n}\r\n</style> "]}]}