{"remainingRequest":"E:\\github\\GateKeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\github\\GateKeeper\\frontend\\src\\components\\ServerList.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\github\\GateKeeper\\frontend\\src\\components\\ServerList.vue","mtime":1742523607917},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742449391247},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1742449393880},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742449391247},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1742449394890}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgeyBUZXJtaW5hbCB9IGZyb20gJ3h0ZXJtJzsNCmltcG9ydCB7IEZpdEFkZG9uIH0gZnJvbSAneHRlcm0tYWRkb24tZml0JzsNCmltcG9ydCBpbyBmcm9tICdzb2NrZXQuaW8tY2xpZW50JzsNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBzZXJ2ZXJzOiBbXSwNCiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLA0KICAgICAgc3NoVmlzaWJsZTogZmFsc2UsDQogICAgICB0ZXJtaW5hbDogbnVsbCwNCiAgICAgIHNlcnZlckZvcm06IHsNCiAgICAgICAgbmFtZTogJycsDQogICAgICAgIGlwOiAnJywNCiAgICAgICAgdHlwZTogJ1dpbmRvd3MnLA0KICAgICAgICB1c2VybmFtZTogJycsDQogICAgICAgIHBhc3N3b3JkOiAnJw0KICAgICAgfSwNCiAgICAgIHJ1bGVzOiB7DQogICAgICAgIG5hbWU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36L6T5YWl5pyN5Yqh5Zmo5ZCN56ewJywgdHJpZ2dlcjogJ2JsdXInIH1dLA0KICAgICAgICBpcDogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaVJUOWcsOWdgCcsIHRyaWdnZXI6ICdibHVyJyB9XSwNCiAgICAgICAgdHlwZTogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fpgInmi6nmnI3liqHlmajnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9XSwNCiAgICAgICAgdXNlcm5hbWU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36L6T5YWl55So5oi35ZCNJywgdHJpZ2dlcjogJ2JsdXInIH1dLA0KICAgICAgICBwYXNzd29yZDogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaXlr4bnoIEnLCB0cmlnZ2VyOiAnYmx1cicgfV0NCiAgICAgIH0sDQogICAgICBhY3RpdmVDb25uZWN0aW9uczoge30sICAvLyDlrZjlgqjmtLvliqjov57mjqXnmoQgdG9rZW4NCiAgICAgIGhlYXJ0YmVhdFRpbWVyOiBudWxsLA0KICAgICAgcmVmcmVzaEludGVydmFsOiBudWxsDQogICAgfQ0KICB9LA0KDQogIGNvbXB1dGVkOiB7DQogICAgaXNBZG1pbigpIHsNCiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyICYmIHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIuaXNfYWRtaW47DQogICAgfSwNCiAgICBpc0xvZ2dlZEluKCkgew0KICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIgIT09IG51bGw7DQogICAgfQ0KICB9LA0KDQogIG1ldGhvZHM6IHsNCiAgICBhc3luYyBsb2FkU2VydmVycygpIHsNCiAgICAgIC8vIOWmguaenOacqueZu+W9le+8jOS4jeWKoOi9veacjeWKoeWZqOWIl+ihqA0KICAgICAgaWYgKCF0aGlzLmlzTG9nZ2VkSW4pIHsNCiAgICAgICAgcmV0dXJuOw0KICAgICAgfQ0KICAgICAgDQogICAgICB0cnkgew0KICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3MuZ2V0KCcvYXBpL3NlcnZlcnMnKTsNCiAgICAgICAgdGhpcy5zZXJ2ZXJzID0gcmVzcG9uc2UuZGF0YTsNCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIC8vIOWPquWcqOeZu+W9leeKtuaAgeS4i+aYvuekuumUmeivr+a2iOaBrw0KICAgICAgICBpZiAodGhpcy5pc0xvZ2dlZEluKSB7DQogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6I635Y+W5pyN5Yqh5Zmo5YiX6KGo5aSx6LSlJyk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9LA0KDQogICAgc2hvd0FkZERpYWxvZygpIHsNCiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWU7DQogICAgICB0aGlzLnNlcnZlckZvcm0gPSB7DQogICAgICAgIG5hbWU6ICcnLA0KICAgICAgICBpcDogJycsDQogICAgICAgIHR5cGU6ICdXaW5kb3dzJywNCiAgICAgICAgdXNlcm5hbWU6ICcnLA0KICAgICAgICBwYXNzd29yZDogJycNCiAgICAgIH07DQogICAgfSwNCg0KICAgIGFzeW5jIHN1Ym1pdEZvcm0oKSB7DQogICAgICB0cnkgew0KICAgICAgICBjb25zdCB2YWxpZCA9IGF3YWl0IHRoaXMuJHJlZnMuc2VydmVyRm9ybS52YWxpZGF0ZSgpOw0KICAgICAgICBpZiAodmFsaWQpIHsNCiAgICAgICAgICBhd2FpdCB0aGlzLmF4aW9zLnBvc3QoJy9hcGkvc2VydmVycycsIHRoaXMuc2VydmVyRm9ybSk7DQogICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKCfmt7vliqDmnI3liqHlmajmiJDlip8nKTsNCiAgICAgICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZTsNCiAgICAgICAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7DQogICAgICAgIH0NCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+a3u+WKoOacjeWKoeWZqOWksei0pScpOw0KICAgICAgfQ0KICAgIH0sDQoNCiAgICBhc3luYyBkZWxldGVTZXJ2ZXIoc2VydmVyKSB7DQogICAgICB0cnkgew0KICAgICAgICBhd2FpdCB0aGlzLiRjb25maXJtKCfnoa7orqTliKDpmaTor6XmnI3liqHlmag/JywgJ+aPkOekuicsIHsNCiAgICAgICAgICB0eXBlOiAnd2FybmluZycNCiAgICAgICAgfSk7DQogICAgICAgIGF3YWl0IHRoaXMuYXhpb3MuZGVsZXRlKGAvYXBpL3NlcnZlcnMvJHtzZXJ2ZXIuaWR9YCk7DQogICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2Vzcygn5Yig6Zmk5oiQ5YqfJyk7DQogICAgICAgIHRoaXMubG9hZFNlcnZlcnMoKTsNCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIGlmIChlcnJvciAhPT0gJ2NhbmNlbCcpIHsNCiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfliKDpmaTlpLHotKUnKTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0sDQoNCiAgICBhc3luYyBjb25uZWN0U2VydmVyKHNlcnZlcikgew0KICAgICAgdHJ5IHsNCiAgICAgICAgaWYgKHNlcnZlci50eXBlID09PSAnV2luZG93cycpIHsNCiAgICAgICAgICAvLyDojrflj5bmnI3liqHlmajlr4bnoIENCiAgICAgICAgICBjb25zdCBwYXNzd29yZFJlc3BvbnNlID0gYXdhaXQgdGhpcy5heGlvcy5nZXQoYC9hcGkvc2VydmVycy8ke3NlcnZlci5pZH0vcGFzc3dvcmRgKTsNCiAgICAgICAgICBjb25zdCBwYXNzd29yZCA9IHBhc3N3b3JkUmVzcG9uc2UuZGF0YS5wYXNzd29yZDsNCg0KICAgICAgICAgIC8vIOWPkei1tyBSRFAg6L+e5o6lDQogICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmF4aW9zLnBvc3QoJy9hcGkvcmRwL2Nvbm5lY3QnLCB7DQogICAgICAgICAgICBzZXJ2ZXJfaWQ6IHNlcnZlci5pZCwNCiAgICAgICAgICAgIHVzZXJuYW1lOiBzZXJ2ZXIudXNlcm5hbWUsDQogICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQNCiAgICAgICAgICB9KTsNCg0KICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHsNCiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcygnUkRQIOi/nuaOpeivt+axguW3suWPkemAgScpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAvLyBMaW51eCBTU0gg6L+e5o6lDQogICAgICAgICAgYXdhaXQgdGhpcy5jb25uZWN0U1NIKHNlcnZlcik7DQogICAgICAgIH0NCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+i/nuaOpeWksei0pe+8micgKyAoZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2UuZGF0YSA/IGVycm9yLnJlc3BvbnNlLmRhdGEuZXJyb3IgOiBlcnJvci5tZXNzYWdlKSk7DQoNCiAgICAgIH0NCiAgICB9LA0KDQogICAgYXN5bmMgY29ubmVjdFNTSChzZXJ2ZXIpIHsNCiAgICAgIHRoaXMuc3NoVmlzaWJsZSA9IHRydWU7DQogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgIGlmICghdGhpcy50ZXJtaW5hbCkgew0KICAgICAgICAgIHRoaXMudGVybWluYWwgPSBuZXcgVGVybWluYWwoKTsNCiAgICAgICAgICBjb25zdCBmaXRBZGRvbiA9IG5ldyBGaXRBZGRvbigpOw0KICAgICAgICAgIHRoaXMudGVybWluYWwubG9hZEFkZG9uKGZpdEFkZG9uKTsNCiAgICAgICAgICB0aGlzLnRlcm1pbmFsLm9wZW4oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlcm1pbmFsJykpOw0KICAgICAgICAgIGZpdEFkZG9uLmZpdCgpOw0KDQogICAgICAgICAgLy8g6I635Y+W5pyN5Yqh5Zmo5a+G56CBDQogICAgICAgICAgdGhpcy5heGlvcy5nZXQoYC9hcGkvc2VydmVycy8ke3NlcnZlci5pZH0vcGFzc3dvcmRgKS50aGVuKHBhc3N3b3JkUmVzcG9uc2UgPT4gew0KICAgICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBwYXNzd29yZFJlc3BvbnNlLmRhdGEucGFzc3dvcmQ7DQoNCiAgICAgICAgICAgIC8vIOS9v+eUqCBTb2NrZXQuSU8g6L+e5o6lIFNTSA0KICAgICAgICAgICAgY29uc3Qgc29ja2V0ID0gaW8oJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMCcpOw0KICAgICAgICAgICAgc29ja2V0LmVtaXQoJ2Nvbm5lY3Rfc3NoJywgew0KICAgICAgICAgICAgICBob3N0OiBzZXJ2ZXIuaXAsDQogICAgICAgICAgICAgIHVzZXJuYW1lOiBzZXJ2ZXIudXNlcm5hbWUsDQogICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZA0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIHNvY2tldC5vbignc3NoX291dHB1dCcsIChkYXRhKSA9PiB7DQogICAgICAgICAgICAgIHRoaXMudGVybWluYWwud3JpdGUoZGF0YS5kYXRhKTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBzb2NrZXQub24oJ3NzaF9lcnJvcicsIChkYXRhKSA9PiB7DQogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoZGF0YS5lcnJvcik7DQogICAgICAgICAgICAgIHRoaXMuc3NoVmlzaWJsZSA9IGZhbHNlOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIHNvY2tldC5vbignZGlzY29ubmVjdCcsICgpID0+IHsNCiAgICAgICAgICAgICAgdGhpcy5zc2hWaXNpYmxlID0gZmFsc2U7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgdGhpcy50ZXJtaW5hbC5vbkRhdGEoZGF0YSA9PiB7DQogICAgICAgICAgICAgIHNvY2tldC5lbWl0KCdzc2hfaW5wdXQnLCBkYXRhKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsNCiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+iOt+WPluacjeWKoeWZqOWvhueggeWksei0pScpOw0KICAgICAgICAgICAgdGhpcy5zc2hWaXNpYmxlID0gZmFsc2U7DQogICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICAgIH0pOw0KICAgIH0NCiAgfSwNCg0KICBjcmVhdGVkKCkgew0KICAgIHRoaXMubG9hZFNlcnZlcnMoKTsNCiAgICAvLyDmr48zMOenkuWIt+aWsOS4gOasoeacjeWKoeWZqOWIl+ihqA0KICAgIHRoaXMucmVmcmVzaEludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gew0KICAgICAgaWYgKHRoaXMuaXNMb2dnZWRJbikgew0KICAgICAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7DQogICAgICB9DQogICAgfSwgMzAwMDApOw0KICB9LA0KDQogIGJlZm9yZURlc3Ryb3koKSB7DQogICAgaWYgKHRoaXMucmVmcmVzaEludGVydmFsKSB7DQogICAgICBjbGVhckludGVydmFsKHRoaXMucmVmcmVzaEludGVydmFsKTsNCiAgICB9DQogICAgaWYgKHRoaXMuaGVhcnRiZWF0VGltZXIpIHsNCiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5oZWFydGJlYXRUaW1lcik7DQogICAgfQ0KICAgIGlmICh0aGlzLnRlcm1pbmFsKSB7DQogICAgICB0aGlzLnRlcm1pbmFsLmRpc3Bvc2UoKTsNCiAgICB9DQogIH0NCn0NCg=="},{"version":3,"sources":["ServerList.vue"],"names":[],"mappings":";AAyGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ServerList.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"server-list\">\r\n    <!-- 只有管理员才能看到添加服务器按钮 -->\r\n    <div class=\"toolbar\" v-if=\"isAdmin\">\r\n      <el-button type=\"primary\" @click=\"showAddDialog\">\r\n        <i class=\"el-icon-plus\"></i> 添加服务器\r\n      </el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"servers\" style=\"width: 100%\">\r\n      <el-table-column prop=\"name\" label=\"名称\" />\r\n      <el-table-column prop=\"ip\" label=\"IP地址\" />\r\n      <el-table-column prop=\"type\" label=\"类型\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n            {{ scope.row.type }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag v-if=\"scope.row.in_use\"\r\n                  :type=\"scope.row.in_use_by_me ? 'warning' : 'danger'\">\r\n            {{ scope.row.in_use_by_me ? '我正在使用中' : `${scope.row.in_use_by_username} 正在使用中` }}\r\n          </el-tag>\r\n          <el-tag v-else type=\"success\">空闲</el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"250\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button \r\n            type=\"primary\" \r\n            size=\"small\" \r\n            @click=\"connectServer(scope.row)\"\r\n            :disabled=\"scope.row.in_use && !scope.row.in_use_by_me\"\r\n            :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n            {{ scope.row.type === 'Windows' ? 'RDP连接' : 'SSH连接' }}\r\n          </el-button>\r\n          <!-- 只有管理员才能看到删除按钮 -->\r\n          <el-button\r\n            v-if=\"isAdmin\"\r\n            type=\"danger\"\r\n            size=\"small\"\r\n            @click=\"deleteServer(scope.row)\"\r\n          >\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 添加服务器对话框 -->\r\n    <el-dialog \r\n      title=\"添加服务器\" \r\n      :visible.sync=\"dialogVisible\" \r\n      width=\"700px\"\r\n      custom-class=\"server-dialog\"\r\n      :close-on-click-modal=\"false\">\r\n      <el-form \r\n        :model=\"serverForm\" \r\n        ref=\"serverForm\" \r\n        :rules=\"rules\"\r\n        label-width=\"80px\"\r\n        class=\"server-form\">\r\n        <div class=\"form-row\">\r\n          <el-form-item label=\"名称\" prop=\"name\" class=\"form-item\">\r\n            <el-input v-model=\"serverForm.name\" placeholder=\"请输入服务器名称\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"IP地址\" prop=\"ip\" class=\"form-item\">\r\n            <el-input v-model=\"serverForm.ip\" placeholder=\"请输入IP地址\"></el-input>\r\n          </el-form-item>\r\n        </div>\r\n        <div class=\"form-row\">\r\n          <el-form-item label=\"类型\" prop=\"type\" class=\"form-item-type\">\r\n            <el-select v-model=\"serverForm.type\" placeholder=\"请选择服务器类型\" style=\"width: 100%\">\r\n              <el-option label=\"Windows\" value=\"Windows\"></el-option>\r\n              <el-option label=\"Linux\" value=\"Linux\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 预留业务标签位置 -->\r\n          <div class=\"form-item-placeholder\"></div>\r\n        </div>\r\n        <div class=\"form-row\">\r\n          <el-form-item label=\"用户名\" prop=\"username\" class=\"form-item\">\r\n            <el-input v-model=\"serverForm.username\" placeholder=\"请输入用户名\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"密码\" prop=\"password\" class=\"form-item\">\r\n            <el-input type=\"password\" v-model=\"serverForm.password\" placeholder=\"请输入密码\" show-password></el-input>\r\n          </el-form-item>\r\n        </div>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- SSH终端窗口 -->\r\n    <el-dialog title=\"SSH终端\" :visible.sync=\"sshVisible\" fullscreen>\r\n      <div id=\"terminal\" class=\"terminal\"></div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Terminal } from 'xterm';\r\nimport { FitAddon } from 'xterm-addon-fit';\r\nimport io from 'socket.io-client';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      servers: [],\r\n      dialogVisible: false,\r\n      sshVisible: false,\r\n      terminal: null,\r\n      serverForm: {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        username: '',\r\n        password: ''\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: '请输入服务器名称', trigger: 'blur' }],\r\n        ip: [{ required: true, message: '请输入IP地址', trigger: 'blur' }],\r\n        type: [{ required: true, message: '请选择服务器类型', trigger: 'change' }],\r\n        username: [{ required: true, message: '请输入用户名', trigger: 'blur' }],\r\n        password: [{ required: true, message: '请输入密码', trigger: 'blur' }]\r\n      },\r\n      activeConnections: {},  // 存储活动连接的 token\r\n      heartbeatTimer: null,\r\n      refreshInterval: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    isAdmin() {\r\n      return this.$store.state.user && this.$store.state.user.is_admin;\r\n    },\r\n    isLoggedIn() {\r\n      return this.$store.state.user !== null;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async loadServers() {\r\n      // 如果未登录，不加载服务器列表\r\n      if (!this.isLoggedIn) {\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const response = await this.axios.get('/api/servers');\r\n        this.servers = response.data;\r\n      } catch (error) {\r\n        // 只在登录状态下显示错误消息\r\n        if (this.isLoggedIn) {\r\n          this.$message.error('获取服务器列表失败');\r\n        }\r\n      }\r\n    },\r\n\r\n    showAddDialog() {\r\n      this.dialogVisible = true;\r\n      this.serverForm = {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        username: '',\r\n        password: ''\r\n      };\r\n    },\r\n\r\n    async submitForm() {\r\n      try {\r\n        const valid = await this.$refs.serverForm.validate();\r\n        if (valid) {\r\n          await this.axios.post('/api/servers', this.serverForm);\r\n          this.$message.success('添加服务器成功');\r\n          this.dialogVisible = false;\r\n          this.loadServers();\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('添加服务器失败');\r\n      }\r\n    },\r\n\r\n    async deleteServer(server) {\r\n      try {\r\n        await this.$confirm('确认删除该服务器?', '提示', {\r\n          type: 'warning'\r\n        });\r\n        await this.axios.delete(`/api/servers/${server.id}`);\r\n        this.$message.success('删除成功');\r\n        this.loadServers();\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败');\r\n        }\r\n      }\r\n    },\r\n\r\n    async connectServer(server) {\r\n      try {\r\n        if (server.type === 'Windows') {\r\n          // 获取服务器密码\r\n          const passwordResponse = await this.axios.get(`/api/servers/${server.id}/password`);\r\n          const password = passwordResponse.data.password;\r\n\r\n          // 发起 RDP 连接\r\n          const response = await this.axios.post('/api/rdp/connect', {\r\n            server_id: server.id,\r\n            username: server.username,\r\n            password: password\r\n          });\r\n\r\n          if (response.data.success) {\r\n            this.$message.success('RDP 连接请求已发送');\r\n          }\r\n        } else {\r\n          // Linux SSH 连接\r\n          await this.connectSSH(server);\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('连接失败：' + (error.response && error.response.data ? error.response.data.error : error.message));\r\n\r\n      }\r\n    },\r\n\r\n    async connectSSH(server) {\r\n      this.sshVisible = true;\r\n      this.$nextTick(() => {\r\n        if (!this.terminal) {\r\n          this.terminal = new Terminal();\r\n          const fitAddon = new FitAddon();\r\n          this.terminal.loadAddon(fitAddon);\r\n          this.terminal.open(document.getElementById('terminal'));\r\n          fitAddon.fit();\r\n\r\n          // 获取服务器密码\r\n          this.axios.get(`/api/servers/${server.id}/password`).then(passwordResponse => {\r\n            const password = passwordResponse.data.password;\r\n\r\n            // 使用 Socket.IO 连接 SSH\r\n            const socket = io('http://localhost:5000');\r\n            socket.emit('connect_ssh', {\r\n              host: server.ip,\r\n              username: server.username,\r\n              password: password\r\n            });\r\n\r\n            socket.on('ssh_output', (data) => {\r\n              this.terminal.write(data.data);\r\n            });\r\n\r\n            socket.on('ssh_error', (data) => {\r\n              this.$message.error(data.error);\r\n              this.sshVisible = false;\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n              this.sshVisible = false;\r\n            });\r\n\r\n            this.terminal.onData(data => {\r\n              socket.emit('ssh_input', data);\r\n            });\r\n          }).catch(error => {\r\n            this.$message.error('获取服务器密码失败');\r\n            this.sshVisible = false;\r\n          });\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.loadServers();\r\n    // 每30秒刷新一次服务器列表\r\n    this.refreshInterval = setInterval(() => {\r\n      if (this.isLoggedIn) {\r\n        this.loadServers();\r\n      }\r\n    }, 30000);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n    if (this.heartbeatTimer) {\r\n      clearInterval(this.heartbeatTimer);\r\n    }\r\n    if (this.terminal) {\r\n      this.terminal.dispose();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.server-list {\r\n  padding: 20px;\r\n}\r\n.toolbar {\r\n  margin-bottom: 20px;\r\n}\r\n.terminal {\r\n  height: 100%;\r\n  background: #000;\r\n}\r\n/* 添加新的样式 */\r\n.server-dialog {\r\n  border-radius: 8px;\r\n}\r\n.server-form {\r\n  padding: 20px 20px 0;\r\n}\r\n.form-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n  margin-bottom: 22px;\r\n}\r\n.form-item {\r\n  flex: 1;\r\n  margin-bottom: 0;\r\n}\r\n.form-item-type {\r\n  flex: 0 0 45%;\r\n  margin-bottom: 0;\r\n}\r\n.form-item-placeholder {\r\n  flex: 0 0 45%;\r\n}\r\n.dialog-footer {\r\n  text-align: right;\r\n  padding-top: 10px;\r\n}\r\n:deep(.el-dialog__body) {\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n:deep(.el-form-item__label) {\r\n  font-weight: 500;\r\n}\r\n:deep(.el-input__inner) {\r\n  border-radius: 4px;\r\n}\r\n:deep(.el-dialog__header) {\r\n  padding: 20px 20px 10px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n:deep(.el-dialog__footer) {\r\n  border-top: 1px solid #eee;\r\n  padding: 15px 20px;\r\n}\r\n</style>"]}]}