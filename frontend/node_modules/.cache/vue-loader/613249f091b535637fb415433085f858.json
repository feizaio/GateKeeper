{"remainingRequest":"E:\\github\\GateKeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\github\\GateKeeper\\frontend\\src\\components\\ServerList.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\github\\GateKeeper\\frontend\\src\\components\\ServerList.vue","mtime":1740636919651},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742449391247},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1742449393880},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1742449391247},{"path":"E:\\github\\GateKeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1742449394890}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgeyBUZXJtaW5hbCB9IGZyb20gJ3h0ZXJtJzsNCmltcG9ydCB7IEZpdEFkZG9uIH0gZnJvbSAneHRlcm0tYWRkb24tZml0JzsNCmltcG9ydCBpbyBmcm9tICdzb2NrZXQuaW8tY2xpZW50JzsNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBzZXJ2ZXJzOiBbXSwNCiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLA0KICAgICAgc3NoVmlzaWJsZTogZmFsc2UsDQogICAgICB0ZXJtaW5hbDogbnVsbCwNCiAgICAgIHNlcnZlckZvcm06IHsNCiAgICAgICAgbmFtZTogJycsDQogICAgICAgIGlwOiAnJywNCiAgICAgICAgdHlwZTogJ1dpbmRvd3MnLA0KICAgICAgICB1c2VybmFtZTogJycsDQogICAgICAgIHBhc3N3b3JkOiAnJw0KICAgICAgfSwNCiAgICAgIHJ1bGVzOiB7DQogICAgICAgIG5hbWU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36L6T5YWl5pyN5Yqh5Zmo5ZCN56ewJywgdHJpZ2dlcjogJ2JsdXInIH1dLA0KICAgICAgICBpcDogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaVJUOWcsOWdgCcsIHRyaWdnZXI6ICdibHVyJyB9XSwNCiAgICAgICAgdHlwZTogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fpgInmi6nmnI3liqHlmajnsbvlnosnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9XSwNCiAgICAgICAgdXNlcm5hbWU6IFt7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36L6T5YWl55So5oi35ZCNJywgdHJpZ2dlcjogJ2JsdXInIH1dLA0KICAgICAgICBwYXNzd29yZDogW3sgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaXlr4bnoIEnLCB0cmlnZ2VyOiAnYmx1cicgfV0NCiAgICAgIH0sDQogICAgICBhY3RpdmVDb25uZWN0aW9uczoge30sICAvLyDlrZjlgqjmtLvliqjov57mjqXnmoQgdG9rZW4NCiAgICAgIGhlYXJ0YmVhdFRpbWVyOiBudWxsDQogICAgfQ0KICB9LA0KDQogIGNvbXB1dGVkOiB7DQogICAgaXNBZG1pbigpIHsNCiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyICYmIHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIuaXNfYWRtaW47DQogICAgfQ0KICB9LA0KDQogIG1ldGhvZHM6IHsNCiAgICBhc3luYyBsb2FkU2VydmVycygpIHsNCiAgICAgIHRyeSB7DQogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5heGlvcy5nZXQoJy9hcGkvc2VydmVycycpOw0KICAgICAgICB0aGlzLnNlcnZlcnMgPSByZXNwb25zZS5kYXRhOw0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6I635Y+W5pyN5Yqh5Zmo5YiX6KGo5aSx6LSlJyk7DQogICAgICB9DQogICAgfSwNCg0KICAgIHNob3dBZGREaWFsb2coKSB7DQogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlOw0KICAgICAgdGhpcy5zZXJ2ZXJGb3JtID0gew0KICAgICAgICBuYW1lOiAnJywNCiAgICAgICAgaXA6ICcnLA0KICAgICAgICB0eXBlOiAnV2luZG93cycsDQogICAgICAgIHVzZXJuYW1lOiAnJywNCiAgICAgICAgcGFzc3dvcmQ6ICcnDQogICAgICB9Ow0KICAgIH0sDQoNCiAgICBhc3luYyBzdWJtaXRGb3JtKCkgew0KICAgICAgdHJ5IHsNCiAgICAgICAgY29uc3QgdmFsaWQgPSBhd2FpdCB0aGlzLiRyZWZzLnNlcnZlckZvcm0udmFsaWRhdGUoKTsNCiAgICAgICAgaWYgKHZhbGlkKSB7DQogICAgICAgICAgYXdhaXQgdGhpcy5heGlvcy5wb3N0KCcvYXBpL3NlcnZlcnMnLCB0aGlzLnNlcnZlckZvcm0pOw0KICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2Vzcygn5re75Yqg5pyN5Yqh5Zmo5oiQ5YqfJyk7DQogICAgICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2U7DQogICAgICAgICAgdGhpcy5sb2FkU2VydmVycygpOw0KICAgICAgICB9DQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfmt7vliqDmnI3liqHlmajlpLHotKUnKTsNCiAgICAgIH0NCiAgICB9LA0KDQogICAgYXN5bmMgZGVsZXRlU2VydmVyKHNlcnZlcikgew0KICAgICAgdHJ5IHsNCiAgICAgICAgYXdhaXQgdGhpcy4kY29uZmlybSgn56Gu6K6k5Yig6Zmk6K+l5pyN5Yqh5ZmoPycsICfmj5DnpLonLCB7DQogICAgICAgICAgdHlwZTogJ3dhcm5pbmcnDQogICAgICAgIH0pOw0KICAgICAgICBhd2FpdCB0aGlzLmF4aW9zLmRlbGV0ZShgL2FwaS9zZXJ2ZXJzLyR7c2VydmVyLmlkfWApOw0KICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MoJ+WIoOmZpOaIkOWKnycpOw0KICAgICAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7DQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICBpZiAoZXJyb3IgIT09ICdjYW5jZWwnKSB7DQogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign5Yig6Zmk5aSx6LSlJyk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9LA0KDQogICAgYXN5bmMgY29ubmVjdFNlcnZlcihzZXJ2ZXIpIHsNCiAgICAgIHRyeSB7DQogICAgICAgIGlmIChzZXJ2ZXIudHlwZSA9PT0gJ1dpbmRvd3MnKSB7DQogICAgICAgICAgLy8g6I635Y+W5pyN5Yqh5Zmo5a+G56CBDQogICAgICAgICAgY29uc3QgcGFzc3dvcmRSZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3MuZ2V0KGAvYXBpL3NlcnZlcnMvJHtzZXJ2ZXIuaWR9L3Bhc3N3b3JkYCk7DQogICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBwYXNzd29yZFJlc3BvbnNlLmRhdGEucGFzc3dvcmQ7DQoNCiAgICAgICAgICAvLyDlj5HotbcgUkRQIOi/nuaOpQ0KICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5heGlvcy5wb3N0KCcvYXBpL3JkcC9jb25uZWN0Jywgew0KICAgICAgICAgICAgc2VydmVyX2lkOiBzZXJ2ZXIuaWQsDQogICAgICAgICAgICB1c2VybmFtZTogc2VydmVyLnVzZXJuYW1lLA0KICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkDQogICAgICAgICAgfSk7DQoNCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7DQogICAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MoJ1JEUCDov57mjqXor7fmsYLlt7Llj5HpgIEnKTsNCiAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgLy8gTGludXggU1NIIOi/nuaOpQ0KICAgICAgICAgIGF3YWl0IHRoaXMuY29ubmVjdFNTSChzZXJ2ZXIpOw0KICAgICAgICB9DQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfov57mjqXlpLHotKXvvJonICsgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmRhdGEgPyBlcnJvci5yZXNwb25zZS5kYXRhLmVycm9yIDogZXJyb3IubWVzc2FnZSkpOw0KDQogICAgICB9DQogICAgfSwNCg0KICAgIGFzeW5jIGNvbm5lY3RTU0goc2VydmVyKSB7DQogICAgICB0aGlzLnNzaFZpc2libGUgPSB0cnVlOw0KICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICBpZiAoIXRoaXMudGVybWluYWwpIHsNCiAgICAgICAgICB0aGlzLnRlcm1pbmFsID0gbmV3IFRlcm1pbmFsKCk7DQogICAgICAgICAgY29uc3QgZml0QWRkb24gPSBuZXcgRml0QWRkb24oKTsNCiAgICAgICAgICB0aGlzLnRlcm1pbmFsLmxvYWRBZGRvbihmaXRBZGRvbik7DQogICAgICAgICAgdGhpcy50ZXJtaW5hbC5vcGVuKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXJtaW5hbCcpKTsNCiAgICAgICAgICBmaXRBZGRvbi5maXQoKTsNCg0KICAgICAgICAgIC8vIOiOt+WPluacjeWKoeWZqOWvhueggQ0KICAgICAgICAgIHRoaXMuYXhpb3MuZ2V0KGAvYXBpL3NlcnZlcnMvJHtzZXJ2ZXIuaWR9L3Bhc3N3b3JkYCkudGhlbihwYXNzd29yZFJlc3BvbnNlID0+IHsNCiAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcGFzc3dvcmRSZXNwb25zZS5kYXRhLnBhc3N3b3JkOw0KDQogICAgICAgICAgICAvLyDkvb/nlKggU29ja2V0LklPIOi/nuaOpSBTU0gNCiAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IGlvKCdodHRwOi8vbG9jYWxob3N0OjUwMDAnKTsNCiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdjb25uZWN0X3NzaCcsIHsNCiAgICAgICAgICAgICAgaG9zdDogc2VydmVyLmlwLA0KICAgICAgICAgICAgICB1c2VybmFtZTogc2VydmVyLnVzZXJuYW1lLA0KICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBzb2NrZXQub24oJ3NzaF9vdXRwdXQnLCAoZGF0YSkgPT4gew0KICAgICAgICAgICAgICB0aGlzLnRlcm1pbmFsLndyaXRlKGRhdGEuZGF0YSk7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgc29ja2V0Lm9uKCdzc2hfZXJyb3InLCAoZGF0YSkgPT4gew0KICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGRhdGEuZXJyb3IpOw0KICAgICAgICAgICAgICB0aGlzLnNzaFZpc2libGUgPSBmYWxzZTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBzb2NrZXQub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7DQogICAgICAgICAgICAgIHRoaXMuc3NoVmlzaWJsZSA9IGZhbHNlOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIHRoaXMudGVybWluYWwub25EYXRhKGRhdGEgPT4gew0KICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgnc3NoX2lucHV0JywgZGF0YSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7DQogICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfojrflj5bmnI3liqHlmajlr4bnoIHlpLHotKUnKTsNCiAgICAgICAgICAgIHRoaXMuc3NoVmlzaWJsZSA9IGZhbHNlOw0KICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICB9DQogIH0sDQoNCiAgbW91bnRlZCgpIHsNCiAgICB0aGlzLmxvYWRTZXJ2ZXJzKCk7DQogICAgLy8g5a6a5pyf5Yi35paw5pyN5Yqh5Zmo5YiX6KGoDQogICAgc2V0SW50ZXJ2YWwoKCkgPT4gew0KICAgICAgdGhpcy5sb2FkU2VydmVycygpOw0KICAgIH0sIDUwMDApOw0KICB9LA0KDQogIGJlZm9yZURlc3Ryb3koKSB7DQogICAgaWYgKHRoaXMudGVybWluYWwpIHsNCiAgICAgIHRoaXMudGVybWluYWwuZGlzcG9zZSgpOw0KICAgIH0NCiAgfQ0KfQ0K"},{"version":3,"sources":["ServerList.vue"],"names":[],"mappings":";AAufile":"ServerList.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"server-list\">\r\n    <!-- 只有管理员才能看到添加服务器按钮 -->\r\n    <div class=\"toolbar\" v-if=\"isAdmin\">\r\n      <el-button type=\"primary\" @click=\"showAddDialog\">\r\n        <i class=\"el-icon-plus\"></i> 添加服务器\r\n      </el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"servers\" style=\"width: 100%\">\r\n      <el-table-column prop=\"name\" label=\"名称\" />\r\n      <el-table-column prop=\"ip\" label=\"IP地址\" />\r\n      <el-table-column prop=\"type\" label=\"类型\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n            {{ scope.row.type }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag v-if=\"scope.row.in_use\"\r\n                  :type=\"scope.row.in_use_by_me ? 'warning' : 'danger'\">\r\n            {{ scope.row.in_use_by_me ? '我正在使用中' : `${scope.row.in_use_by_username} 正在使用中` }}\r\n          </el-tag>\r\n          <el-tag v-else type=\"success\">空闲</el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"250\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button \r\n            type=\"primary\" \r\n            size=\"small\" \r\n            @click=\"connectServer(scope.row)\"\r\n            :disabled=\"scope.row.in_use && !scope.row.in_use_by_me\"\r\n            :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n            {{ scope.row.type === 'Windows' ? 'RDP连接' : 'SSH连接' }}\r\n          </el-button>\r\n          <!-- 只有管理员才能看到删除按钮 -->\r\n          <el-button\r\n            v-if=\"isAdmin\"\r\n            type=\"danger\"\r\n            size=\"small\"\r\n            @click=\"deleteServer(scope.row)\"\r\n          >\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 添加服务器对话框 -->\r\n    <el-dialog title=\"添加服务器\" :visible.sync=\"dialogVisible\">\r\n      <el-form :model=\"serverForm\" ref=\"serverForm\" :rules=\"rules\">\r\n        <el-form-item label=\"名称\" prop=\"name\">\r\n          <el-input v-model=\"serverForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"IP地址\" prop=\"ip\">\r\n          <el-input v-model=\"serverForm.ip\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"类型\" prop=\"type\">\r\n          <el-select v-model=\"serverForm.type\">\r\n            <el-option label=\"Windows\" value=\"Windows\"></el-option>\r\n            <el-option label=\"Linux\" value=\"Linux\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"serverForm.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input type=\"password\" v-model=\"serverForm.password\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitForm\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- SSH终端窗口 -->\r\n    <el-dialog title=\"SSH终端\" :visible.sync=\"sshVisible\" fullscreen>\r\n      <div id=\"terminal\" class=\"terminal\"></div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Terminal } from 'xterm';\r\nimport { FitAddon } from 'xterm-addon-fit';\r\nimport io from 'socket.io-client';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      servers: [],\r\n      dialogVisible: false,\r\n      sshVisible: false,\r\n      terminal: null,\r\n      serverForm: {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        username: '',\r\n        password: ''\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: '请输入服务器名称', trigger: 'blur' }],\r\n        ip: [{ required: true, message: '请输入IP地址', trigger: 'blur' }],\r\n        type: [{ required: true, message: '请选择服务器类型', trigger: 'change' }],\r\n        username: [{ required: true, message: '请输入用户名', trigger: 'blur' }],\r\n        password: [{ required: true, message: '请输入密码', trigger: 'blur' }]\r\n      },\r\n      activeConnections: {},  // 存储活动连接的 token\r\n      heartbeatTimer: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    isAdmin() {\r\n      return this.$store.state.user && this.$store.state.user.is_admin;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async loadServers() {\r\n      try {\r\n        const response = await this.axios.get('/api/servers');\r\n        this.servers = response.data;\r\n      } catch (error) {\r\n        this.$message.error('获取服务器列表失败');\r\n      }\r\n    },\r\n\r\n    showAddDialog() {\r\n      this.dialogVisible = true;\r\n      this.serverForm = {\r\n        name: '',\r\n        ip: '',\r\n        type: 'Windows',\r\n        username: '',\r\n        password: ''\r\n      };\r\n    },\r\n\r\n    async submitForm() {\r\n      try {\r\n        const valid = await this.$refs.serverForm.validate();\r\n        if (valid) {\r\n          await this.axios.post('/api/servers', this.serverForm);\r\n          this.$message.success('添加服务器成功');\r\n          this.dialogVisible = false;\r\n          this.loadServers();\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('添加服务器失败');\r\n      }\r\n    },\r\n\r\n    async deleteServer(server) {\r\n      try {\r\n        await this.$confirm('确认删除该服务器?', '提示', {\r\n          type: 'warning'\r\n        });\r\n        await this.axios.delete(`/api/servers/${server.id}`);\r\n        this.$message.success('删除成功');\r\n        this.loadServers();\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败');\r\n        }\r\n      }\r\n    },\r\n\r\n    async connectServer(server) {\r\n      try {\r\n        if (server.type === 'Windows') {\r\n          // 获取服务器密码\r\n          const passwordResponse = await this.axios.get(`/api/servers/${server.id}/password`);\r\n          const password = passwordResponse.data.password;\r\n\r\n          // 发起 RDP 连接\r\n          const response = await this.axios.post('/api/rdp/connect', {\r\n            server_id: server.id,\r\n            username: server.username,\r\n            password: password\r\n          });\r\n\r\n          if (response.data.success) {\r\n            this.$message.success('RDP 连接请求已发送');\r\n          }\r\n        } else {\r\n          // Linux SSH 连接\r\n          await this.connectSSH(server);\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('连接失败：' + (error.response && error.response.data ? error.response.data.error : error.message));\r\n\r\n      }\r\n    },\r\n\r\n    async connectSSH(server) {\r\n      this.sshVisible = true;\r\n      this.$nextTick(() => {\r\n        if (!this.terminal) {\r\n          this.terminal = new Terminal();\r\n          const fitAddon = new FitAddon();\r\n          this.terminal.loadAddon(fitAddon);\r\n          this.terminal.open(document.getElementById('terminal'));\r\n          fitAddon.fit();\r\n\r\n          // 获取服务器密码\r\n          this.axios.get(`/api/servers/${server.id}/password`).then(passwordResponse => {\r\n            const password = passwordResponse.data.password;\r\n\r\n            // 使用 Socket.IO 连接 SSH\r\n            const socket = io('http://localhost:5000');\r\n            socket.emit('connect_ssh', {\r\n              host: server.ip,\r\n              username: server.username,\r\n              password: password\r\n            });\r\n\r\n            socket.on('ssh_output', (data) => {\r\n              this.terminal.write(data.data);\r\n            });\r\n\r\n            socket.on('ssh_error', (data) => {\r\n              this.$message.error(data.error);\r\n              this.sshVisible = false;\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n              this.sshVisible = false;\r\n            });\r\n\r\n            this.terminal.onData(data => {\r\n              socket.emit('ssh_input', data);\r\n            });\r\n          }).catch(error => {\r\n            this.$message.error('获取服务器密码失败');\r\n            this.sshVisible = false;\r\n          });\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.loadServers();\r\n    // 定期刷新服务器列表\r\n    setInterval(() => {\r\n      this.loadServers();\r\n    }, 5000);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.terminal) {\r\n      this.terminal.dispose();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.server-list {\r\n  padding: 20px;\r\n}\r\n.toolbar {\r\n  margin-bottom: 20px;\r\n}\r\n.terminal {\r\n  height: 100%;\r\n  background: #000;\r\n}\r\n</style>"]}]}