{"remainingRequest":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gatekeeper\\frontend\\src\\components\\UserManagement.vue?vue&type=style&index=0&id=2d13e59e&scoped=true&lang=css","dependencies":[{"path":"E:\\gatekeeper\\frontend\\src\\components\\UserManagement.vue","mtime":1747376883903},{"path":"E:\\gatekeeper\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1751596767439},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1751596773072},{"path":"E:\\gatekeeper\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1751596769285},{"path":"E:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1751596765290},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1751596771154}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci51c2VyLW1hbmFnZW1lbnQgewogIHBhZGRpbmc6IDIwcHg7Cn0KCi50b29sYmFyIHsKICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9Cgouc2VydmVyLWF1dGgtZGlhbG9nIDpkZWVwKC5lbC1kaWFsb2dfX2JvZHkpIHsKICBwYWRkaW5nOiAyMHB4Owp9Cgouc2VydmVyLXRyYW5zZmVyLWNvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIG1hcmdpbjogMDsKfQoKLnNlcnZlci10cmFuc2ZlciB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9Cgouc2VydmVyLXRyYW5zZmVyIDpkZWVwKC5lbC10cmFuc2Zlci1wYW5lbCkgewogIHdpZHRoOiAzODBweDsKICBtYXJnaW46IDA7Cn0KCi5zZXJ2ZXItdHJhbnNmZXIgOmRlZXAoLmVsLXRyYW5zZmVyLXBhbmVsX19oZWFkZXIpIHsKICBwYWRkaW5nOiA4cHggMTVweDsKICBiYWNrZ3JvdW5kOiAjZjVmN2ZhOwp9Cgouc2VydmVyLXRyYW5zZmVyIDpkZWVwKC5lbC10cmFuc2Zlci1wYW5lbF9fYm9keSkgewogIGhlaWdodDogNDAwcHg7Cn0KCi5zZXJ2ZXItdHJhbnNmZXIgOmRlZXAoLmVsLXRyYW5zZmVyLXBhbmVsX19saXN0KSB7CiAgaGVpZ2h0OiAzNDBweDsKfQoKLnNlcnZlci10cmFuc2ZlciA6ZGVlcCguZWwtdHJhbnNmZXItcGFuZWxfX2l0ZW0pIHsKICBvdmVyZmxvdzogaGlkZGVuOwogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwogIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgcGFkZGluZzogMCAxNXB4OwogIGhlaWdodDogMzJweDsKICBsaW5lLWhlaWdodDogMzJweDsKfQoKLnNlcnZlci10cmFuc2ZlciA6ZGVlcCguZWwtdHJhbnNmZXJfX2J1dHRvbnMpIHsKICBwYWRkaW5nOiAwIDMwcHg7Cn0KCi5zZXJ2ZXItdHJhbnNmZXIgOmRlZXAoLmVsLXRyYW5zZmVyX19idXR0b24pIHsKICBkaXNwbGF5OiBibG9jazsKICBtYXJnaW46IDVweCAwOwogIHBhZGRpbmc6IDEwcHg7Cn0KCi5zZXJ2ZXItdHJhbnNmZXIgOmRlZXAoLmVsLWNoZWNrYm94X19sYWJlbCkgewogIGZvbnQtc2l6ZTogMTRweDsKfQoKLmRpYWxvZy1mb290ZXIgewogIHRleHQtYWxpZ246IHJpZ2h0OwogIHBhZGRpbmctdG9wOiAyMHB4Owp9Cg=="},{"version":3,"sources":["UserManagement.vue"],"names":[],"mappings":";AA0OA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"UserManagement.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"user-management\">\n    <div class=\"toolbar\">\n      <el-button type=\"primary\" @click=\"showAddUserDialog\">\n        <i class=\"el-icon-plus\"></i> 添加用户\n      </el-button>\n    </div>\n\n    <el-table :data=\"users\" style=\"width: 100%\">\n      <el-table-column prop=\"username\" label=\"用户名\"></el-table-column>\n      <el-table-column prop=\"is_admin\" label=\"角色\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.is_admin ? '管理员' : '普通用户' }}\n        </template>\n      </el-table-column>\n      <el-table-column label=\"授权服务器\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" @click=\"showServerAuthDialog(scope.row)\">\n            管理授权\n          </el-button>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" width=\"200\">\n        <template slot-scope=\"scope\">\n          <el-button \n            size=\"mini\" \n            type=\"primary\"\n            @click=\"showEditUserDialog(scope.row)\">\n            编辑\n          </el-button>\n          <el-button \n            size=\"mini\" \n            type=\"danger\" \n            @click=\"deleteUser(scope.row)\"\n            :disabled=\"scope.row.id === currentUser.id\">\n            删除\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 添加/编辑用户对话框 -->\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"userDialogVisible\">\n      <el-form :model=\"userForm\" :rules=\"userRules\" ref=\"userForm\" label-width=\"100px\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"userForm.username\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input type=\"password\" v-model=\"userForm.password\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"是否管理员\">\n          <el-switch v-model=\"userForm.is_admin\"></el-switch>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"userDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"handleUserSubmit\">确定</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 服务器授权对话框 -->\n    <el-dialog title=\"服务器授权\" :visible.sync=\"serverAuthDialogVisible\" width=\"900px\" class=\"server-auth-dialog\">\n      <div class=\"server-transfer-container\">\n      <el-transfer\n        v-model=\"selectedServers\"\n        :data=\"allServers\"\n        :titles=\"['未授权服务器', '已授权服务器']\"\n          filterable\n          filter-placeholder=\"请输入服务器名称\"\n        :props=\"{\n          key: 'id',\n            label: 'displayName'\n        }\"\n          class=\"server-transfer\"\n      ></el-transfer>\n      </div>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"serverAuthDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"handleServerAuth\">确定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      users: [],\n      allServers: [],\n      selectedServers: [],\n      currentUser: null,\n      selectedUser: null,\n      userDialogVisible: false,\n      serverAuthDialogVisible: false,\n      userForm: {\n        username: '',\n        password: '',\n        is_admin: false\n      },\n      userRules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    dialogTitle() {\n      return this.selectedUser ? '编辑用户' : '添加用户';\n    }\n  },\n  methods: {\n    async loadUsers() {\n      try {\n        const response = await axios.get('/api/users');\n        this.users = response.data;\n        // 获取当前用户信息\n        const currentUserResponse = await axios.get('/api/users/current');\n        this.currentUser = currentUserResponse.data;\n      } catch (error) {\n        this.$message.error('获取用户列表失败');\n      }\n    },\n    \n    async loadServers() {\n      try {\n        const response = await axios.get('/api/servers');\n        this.allServers = response.data.map(server => ({\n          id: server.id,\n          name: server.name,\n          ip: server.ip,\n          type: server.type,\n          username: server.username,\n          displayName: `${server.name} (${server.ip})`\n        }));\n      } catch (error) {\n        this.$message.error('获取服务器列表失败');\n      }\n    },\n    \n    showAddUserDialog() {\n      this.selectedUser = null;\n      this.userForm = {\n        username: '',\n        password: '',\n        is_admin: false\n      };\n      this.userDialogVisible = true;\n    },\n    \n    showEditUserDialog(user) {\n      this.selectedUser = user;\n      this.userForm = {\n        username: user.username,\n        password: '',\n        is_admin: user.is_admin\n      };\n      this.userDialogVisible = true;\n    },\n    \n    async handleUserSubmit() {\n      try {\n        if (this.selectedUser) {\n          // 编辑用户\n          await axios.put(`/api/users/${this.selectedUser.id}`, this.userForm);\n          this.$message.success('用户更新成功');\n        } else {\n          // 添加用户\n          await axios.post('/api/users', this.userForm);\n          this.$message.success('用户添加成功');\n        }\n        this.userDialogVisible = false;\n        this.loadUsers();\n      } catch (error) {\n        let errorMessage = '操作失败';\n        if (error.response && error.response.data && error.response.data.error) {\n          errorMessage = error.response.data.error;\n        }\n        this.$message.error(errorMessage);\n      }\n    },\n    \n    async deleteUser(user) {\n      try {\n        await this.$confirm('确认删除该用户?', '提示', {\n          type: 'warning'\n        });\n        await axios.delete(`/api/users/${user.id}`);\n        this.$message.success('删除成功');\n        this.loadUsers();\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('删除失败');\n        }\n      }\n    },\n    \n    async showServerAuthDialog(user) {\n      this.selectedUser = user;\n      this.serverAuthDialogVisible = true;\n      try {\n        await this.loadServers(); // 加载所有服务器\n        const response = await axios.get(`/api/users/${user.id}/servers`);\n        this.selectedServers = response.data.map(server => server.id);\n      } catch (error) {\n        this.$message.error('获取用户服务器授权失败');\n      }\n    },\n    \n    async handleServerAuth() {\n      try {\n        await axios.post(`/api/users/${this.selectedUser.id}/servers`, {\n          server_ids: this.selectedServers\n        });\n        this.$message.success('服务器授权更新成功');\n        this.serverAuthDialogVisible = false;\n      } catch (error) {\n        this.$message.error('更新服务器授权失败');\n      }\n    }\n  },\n  created() {\n    this.loadUsers();\n  }\n}\n</script>\n\n<style scoped>\n.user-management {\n  padding: 20px;\n}\n\n.toolbar {\n  margin-bottom: 20px;\n}\n\n.server-auth-dialog :deep(.el-dialog__body) {\n  padding: 20px;\n}\n\n.server-transfer-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n}\n\n.server-transfer {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.server-transfer :deep(.el-transfer-panel) {\n  width: 380px;\n  margin: 0;\n}\n\n.server-transfer :deep(.el-transfer-panel__header) {\n  padding: 8px 15px;\n  background: #f5f7fa;\n}\n\n.server-transfer :deep(.el-transfer-panel__body) {\n  height: 400px;\n}\n\n.server-transfer :deep(.el-transfer-panel__list) {\n  height: 340px;\n}\n\n.server-transfer :deep(.el-transfer-panel__item) {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 0 15px;\n  height: 32px;\n  line-height: 32px;\n}\n\n.server-transfer :deep(.el-transfer__buttons) {\n  padding: 0 30px;\n}\n\n.server-transfer :deep(.el-transfer__button) {\n  display: block;\n  margin: 5px 0;\n  padding: 10px;\n}\n\n.server-transfer :deep(.el-checkbox__label) {\n  font-size: 14px;\n}\n\n.dialog-footer {\n  text-align: right;\n  padding-top: 20px;\n}\n</style> "]}]}