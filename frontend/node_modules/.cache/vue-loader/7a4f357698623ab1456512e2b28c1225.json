{"remainingRequest":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gatekeeper\\frontend\\src\\components\\Layout.vue?vue&type=style&index=0&id=005bfc5a&scoped=true&lang=css","dependencies":[{"path":"E:\\gatekeeper\\frontend\\src\\components\\Layout.vue","mtime":1751423160169},{"path":"E:\\gatekeeper\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1751596767439},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1751596773072},{"path":"E:\\gatekeeper\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1751596769285},{"path":"E:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1751596765290},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1751596771154}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Layout.vue"],"names":[],"mappings":";AAilfile":"Layout.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"layout\" @mousemove=\"resetInactivityTimer\" @click=\"checkAndResetTimer\" @keydown=\"resetInactivityTimer\">\n    <el-container>\n      <el-header height=\"50px\">\n        <div class=\"header-content\">\n          <div class=\"client-status\">\n            <el-tooltip :content=\"statusText\" placement=\"bottom\">\n              <i :class=\"['client-icon', statusIcon]\"></i>\n            </el-tooltip>\n          </div>\n          <span class=\"header-title\">堡垒机管理系统</span>\n          \n          <!-- 用户信息下拉菜单 -->\n          <div class=\"user-dropdown\">\n            <el-dropdown trigger=\"click\" @command=\"handleCommand\">\n              <div class=\"user-info\">\n                <i class=\"el-icon-user-solid\"></i>\n                <span>{{ currentUser.username }}</span>\n                <i class=\"el-icon-caret-bottom\"></i>\n              </div>\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-dropdown-item command=\"changePassword\">\n                  <i class=\"el-icon-key\"></i>\n                  <span>修改密码</span>\n                </el-dropdown-item>\n                <el-dropdown-item divided command=\"logout\">\n                  <i class=\"el-icon-switch-button\"></i>\n                  <span>退出登录</span>\n                </el-dropdown-item>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n        </div>\n      </el-header>\n      \n      <el-container>\n        <el-aside width=\"180px\">\n          <el-menu\n            :default-active=\"$route.path\"\n            class=\"el-menu-vertical\"\n            router>\n            <el-menu-item index=\"/dashboard\" v-if=\"isAdmin\">\n              <i class=\"el-icon-data-analysis\"></i>\n              <span>仪表盘</span>\n            </el-menu-item>\n            <el-menu-item index=\"/\">\n              <i class=\"el-icon-monitor\"></i>\n              <span>服务器管理</span>\n            </el-menu-item>\n            \n            <el-submenu index=\"2\">\n              <template slot=\"title\">\n                <i class=\"el-icon-setting\"></i>\n                <span>系统设置</span>\n              </template>\n              <el-menu-item index=\"/users\">\n                <i class=\"el-icon-user\"></i>\n                <span>用户管理</span>\n              </el-menu-item>\n              <el-menu-item index=\"/system/categories\" v-if=\"isAdmin\">\n                <i class=\"el-icon-collection-tag\"></i>\n                <span>分类管理</span>\n              </el-menu-item>\n              <el-menu-item index=\"/system/credentials\" v-if=\"isAdmin\">\n                <i class=\"el-icon-key\"></i>\n                <span>凭据管理</span>\n              </el-menu-item>\n              <el-menu-item index=\"/system/audit-logs\" v-if=\"isAdmin\">\n                <i class=\"el-icon-document\"></i>\n                <span>审计日志</span>\n              </el-menu-item>\n            </el-submenu>\n          </el-menu>\n        </el-aside>\n        \n        <el-main class=\"main-content\">\n          <router-view></router-view>\n        </el-main>\n      </el-container>\n    </el-container>\n\n    <!-- 修改密码对话框 -->\n    <el-dialog\n      title=\"修改密码\"\n      :visible.sync=\"passwordDialogVisible\"\n      width=\"400px\"\n      :close-on-click-modal=\"false\">\n      <el-form\n        :model=\"passwordForm\"\n        :rules=\"passwordRules\"\n        ref=\"passwordForm\"\n        label-width=\"100px\">\n        <el-form-item label=\"原密码\" prop=\"oldPassword\">\n          <el-input\n            v-model=\"passwordForm.oldPassword\"\n            type=\"password\"\n            show-password\n            placeholder=\"请输入原密码\">\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\n          <el-input\n            v-model=\"passwordForm.newPassword\"\n            type=\"password\"\n            show-password\n            placeholder=\"请输入新密码\">\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"确认新密码\" prop=\"confirmPassword\">\n          <el-input\n            v-model=\"passwordForm.confirmPassword\"\n            type=\"password\"\n            show-password\n            placeholder=\"请再次输入新密码\">\n          </el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"passwordDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"submitPasswordChange\">确 定</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加客户端未连接弹窗 -->\n    <el-dialog\n      title=\"客户端连接提示\"\n      :visible.sync=\"clientNotConnectedDialogVisible\"\n      width=\"360px\"\n      :close-on-click-modal=\"false\"\n      :show-close=\"false\"\n      custom-class=\"client-not-connected-dialog\">\n      <div class=\"client-dialog-content\">\n        <div class=\"client-dialog-icon\">\n          <i class=\"el-icon-warning-outline\"></i>\n        </div>\n        <div class=\"client-dialog-message\">\n          <p>检测到客户端未连接</p>\n          <ul>\n            <li>请确保已安装堡垒机客户端</li>\n            <li>如未安装，请点击下载并安装</li>\n            <li>如已安装，请点击启动客户端</li>\n          </ul>\n        </div>\n      </div>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"downloadClient\" size=\"small\">下载客户端</el-button>\n        <el-button type=\"primary\" @click=\"startClient\" size=\"small\">启动客户端</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'Layout',\n  data() {\n    // 密码确认验证函数\n    const validateConfirmPassword = (rule, value, callback) => {\n      if (value !== this.passwordForm.newPassword) {\n        callback(new Error('两次输入的密码不一致'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      clientConnected: false,\n      clientStatus: null,\n      checkingStatus: false,\n      showClientDialog: false,\n      passwordDialogVisible: false,\n      clientNotConnectedDialogVisible: false,\n      clientConfig: {\n        // 客户端协议，用于启动客户端应用\n        protocol: 'fort://',\n        // 客户端端口，用于检测客户端状态\n        port: 45654,\n        // 客户端下载文件名\n        fileName: 'GatekeeperSetup.exe'\n      },\n      passwordForm: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      passwordRules: {\n        oldPassword: [\n          { required: true, message: '请输入原密码', trigger: 'blur' }\n        ],\n        newPassword: [\n          { required: true, message: '请输入新密码', trigger: 'blur' },\n          { min: 6, message: '密码长度不能小于6个字符', trigger: 'blur' }\n        ],\n        confirmPassword: [\n          { required: true, message: '请再次输入新密码', trigger: 'blur' },\n          { validator: validateConfirmPassword, trigger: 'blur' }\n        ]\n      },\n      statusCheckController: null,\n      lastCheckTime: 0, // 添加上次检查时间记录\n      consecutiveFailures: 0, // 添加连续失败次数记录\n      dialogUpdateTimer: null // 弹窗状态更新定时器\n    }\n  },\n  computed: {\n    statusIcon() {\n      if (this.checkingStatus) return 'el-icon-loading';\n      if (!this.clientStatus) return 'el-icon-error';\n      return this.clientStatus.server_connected ? 'el-icon-success' : 'el-icon-warning';\n    },\n    statusText() {\n      if (this.checkingStatus) return '正在检查客户端状态...';\n      if (!this.clientStatus) return '客户端未连接';\n      if (!this.clientStatus.server_connected) return '堡垒机连接断开';\n      return '客户端已连接';\n    },\n    isLoggedIn() {\n      return this.$store.state.user !== null;\n    },\n    isAdmin() {\n      return this.$store.state.user && this.$store.state.user.is_admin;\n    },\n    currentUser() {\n      return this.$store.state.user || { username: '' };\n    }\n  },\n  methods: {\n    // 添加更新弹窗显示状态的方法\n    updateDialogVisibility() {\n      console.log('更新弹窗状态，当前客户端状态:', this.statusIcon, '已连接:', this.clientConnected);\n      \n      // 如果状态图标是成功，强制关闭弹窗\n      if (this.statusIcon === 'el-icon-success') {\n        this.clientNotConnectedDialogVisible = false;\n        console.log('客户端已连接，关闭弹窗');\n      }\n      \n      // 如果客户端已连接，强制关闭弹窗\n      if (this.clientConnected) {\n        this.clientNotConnectedDialogVisible = false;\n        console.log('客户端已连接，关闭弹窗');\n      }\n    },\n    \n    // 重置不活动计时器\n    resetInactivityTimer() {\n      // 使用Vuex action重置计时器\n      this.$store.dispatch('resetInactivityTimer');\n    },\n    \n    // 检查客户端状态并重置计时器\n    checkAndResetTimer() {\n      this.resetInactivityTimer();\n      \n      // 如果最后一次检查是在3秒前，且当前未在检查中，则立即检查\n      const now = Date.now();\n      if (now - this.lastCheckTime > 3000 && !this.checkingStatus) {\n        this.checkClientStatus();\n      }\n    },\n    async handleLogout() {\n      try {\n        // 调用注销接口\n        await axios.post('/api/auth/logout');\n        // 清除本地存储的 token 和用户信息\n        localStorage.removeItem('token');\n        this.$store.commit('clearUserInfo');\n        // 停止状态检查\n        this.stopStatusCheck();\n        // 重置状态\n        this.clientConnected = false;\n        this.clientStatus = null;\n        this.checkingStatus = false;\n        this.showClientDialog = false;\n        this.clientNotConnectedDialogVisible = false;\n        // 跳转到登录页面\n        this.$router.push('/login');\n        this.$message.success('注销成功');\n      } catch (error) {\n        console.error('注销失败:', error);\n        const errorMessage = error.response && error.response.data && error.response.data.error || error.message;\n        this.$message.error('注销失败: ' + errorMessage);\n      }\n    },\n    async checkClientStatus() {\n      // 如果未登录，不执行检查\n      if (!this.isLoggedIn) {\n        return;\n      }\n      \n      // 检查是否处于冷却期（1秒内）且当前未在检查中\n      const now = Date.now();\n      if (now - this.lastCheckTime < 1000 && !this.checkingStatus) {\n        console.log('客户端状态检查过于频繁，忽略本次检查');\n        return;\n      }\n      \n      // 更新最后检查时间\n      this.lastCheckTime = now;\n      \n      try {\n        // 设置正在检查状态\n        this.checkingStatus = true;\n\n        // 取消之前的请求（如果有）\n        if (this.statusCheckController) {\n          this.statusCheckController.abort();\n        }\n        \n        // 创建新的 AbortController\n        this.statusCheckController = new AbortController();\n        const timeout = setTimeout(() => this.statusCheckController.abort(), 1500);\n        \n        // 直接从本地客户端获取状态\n        const response = await fetch('http://127.0.0.1:45654/status', {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json'\n          },\n          signal: this.statusCheckController.signal\n        });\n        \n        clearTimeout(timeout);\n        \n        if (response.ok) {\n          const data = await response.json();\n          this.clientStatus = data;\n          const wasConnected = this.clientConnected;\n          this.clientConnected = data.status === 'running' && data.server_connected;\n          \n          // 保存客户端信息到store\n          this.$store.commit('SET_CLIENT_INFO', data);\n          \n          // 根据连接状态直接控制弹窗\n          this.clientNotConnectedDialogVisible = !this.clientConnected;\n          \n          // 如果连接成功，重置连续失败次数\n          if (this.clientConnected) {\n            this.consecutiveFailures = 0;\n            \n            // 强制根据客户端状态更新弹窗\n            this.updateDialogVisibility();\n            \n            // 如果之前未连接，现在连接成功，显示连接成功提示\n            if (!wasConnected) {\n              this.$notify({\n                title: '客户端已连接',\n                message: '堡垒机客户端连接成功',\n                type: 'success',\n                duration: 3000,\n                position: 'top-right'\n              });\n            }\n          } else {\n            // 即使请求成功，但如果客户端未真正连接，也计为失败\n            this.consecutiveFailures++;\n          }\n          \n          console.log('客户端状态:', data);\n        } else {\n          this.clientStatus = null;\n          this.clientConnected = false;\n          this.$store.commit('SET_CLIENT_INFO', null);\n          this.consecutiveFailures++;\n          this.clientNotConnectedDialogVisible = true;\n        }\n      } catch (error) {\n        this.clientStatus = null;\n        this.clientConnected = false;\n        this.$store.commit('SET_CLIENT_INFO', null);\n        \n        if (error.name === 'AbortError') {\n          this.consecutiveFailures += 0.5;\n          console.log('检查客户端状态超时');\n        } else {\n          this.consecutiveFailures++;\n          console.error('检查客户端状态失败:', error);\n        }\n        \n        this.clientNotConnectedDialogVisible = true;\n      } finally {\n        this.checkingStatus = false;\n        this.statusCheckController = null;\n        \n        // 检查完成后，再次根据当前状态强制更新弹窗状态\n        this.$nextTick(() => {\n          this.updateDialogVisibility();\n        });\n      }\n    },\n    \n    // 在下面的方法中，增加立即检查状态的逻辑\n    downloadClient() {\n      try {\n        // 使用静态的下载链接\n        const downloadUrl = '/static/GatekeeperSetup.exe';\n        console.log('尝试下载客户端，下载地址:', downloadUrl);\n        \n        // 显示提示\n        this.$message.success('开始下载客户端，请稍候...');\n        \n        // 使用a标签下载\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.setAttribute('download', 'GatekeeperSetup.exe');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        // 下载后显示提示\n        setTimeout(() => {\n          this.$confirm('如果下载没有自动开始，请联系管理员获取客户端安装包', '下载提示', {\n            confirmButtonText: '确定',\n            showCancelButton: false,\n            type: 'info'\n          });\n        }, 3000);\n      } catch (error) {\n        console.error('下载客户端出错:', error);\n        this.$message.error('下载失败，请联系管理员获取客户端安装包');\n      }\n    },\n    \n    startClient() {\n      // 如果客户端已经连接，则不需要启动\n      if (this.clientConnected) {\n        this.$message.info('客户端已连接，无需重新启动');\n        return;\n      }\n      \n      // 显示正在尝试连接的消息\n      this.$message({\n        message: '正在尝试启动客户端...',\n        type: 'info',\n        duration: 3000\n      });\n      \n      // 使用注册的协议启动客户端\n      window.location.href = 'fort://start';\n      \n      // 设置一个短暂的延迟后再次检查客户端状态\n      setTimeout(() => {\n        console.log('启动客户端后重新检查状态');\n        this.checkClientStatus();\n      }, 3000);\n    },\n    \n    checkClientInstalled() {\n      this.clientInstalled = true;\n    },\n    \n    startStatusCheck() {\n      // 如果未登录，不启动检查\n      if (!this.isLoggedIn) {\n        return;\n      }\n      \n      // 如果已经有定时器在运行，先清除它\n      this.stopStatusCheck();\n\n      // 初始化状态\n      this.clientNotConnectedDialogVisible = false;\n      \n      // 更频繁地检查状态（每3秒一次）\n      this.statusCheckInterval = setInterval(() => {\n        this.checkClientStatus();\n      }, 3000);\n      \n      // 立即执行一次检查\n      this.checkClientStatus();\n    },\n    stopStatusCheck() {\n      if (this.statusCheckInterval) {\n        clearInterval(this.statusCheckInterval);\n        this.statusCheckInterval = null;\n      }\n      \n      // 取消进行中的请求\n      if (this.statusCheckController) {\n        this.statusCheckController.abort();\n        this.statusCheckController = null;\n      }\n\n      // 重置状态\n      this.clientNotConnectedDialogVisible = false;\n    },\n    handleCommand(command) {\n      switch (command) {\n        case 'changePassword':\n          this.showChangePasswordDialog();\n          break;\n        case 'logout':\n          this.handleLogout();\n          break;\n      }\n    },\n    showChangePasswordDialog() {\n      this.passwordDialogVisible = true;\n      this.passwordForm = {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      };\n    },\n    async submitPasswordChange() {\n      try {\n        await this.$refs.passwordForm.validate();\n        \n        const response = await this.axios.post('/api/auth/change-password', {\n          old_password: this.passwordForm.oldPassword,\n          new_password: this.passwordForm.newPassword\n        });\n\n        if (response.data.success) {\n          this.$message.success('密码修改成功');\n          this.passwordDialogVisible = false;\n        }\n      } catch (error) {\n        if (error.response) {\n          this.$message.error(error.response.data.error || '密码修改失败');\n        } else if (error.message) {\n          // 表单验证错误\n          this.$message.error(error.message);\n        } else {\n          this.$message.error('密码修改失败');\n        }\n      }\n    }\n  },\n  watch: {\n    // 监听登录状态变化\n    isLoggedIn(newValue) {\n      if (newValue) {\n        this.startStatusCheck();\n        // 初始化不活动计时器\n        this.resetInactivityTimer();\n      } else {\n        this.stopStatusCheck();\n        // 确保弹窗关闭\n        this.clientNotConnectedDialogVisible = false;\n      }\n    },\n    // 添加对状态图标的监听\n    statusIcon(newIcon) {\n      console.log('状态图标变化:', newIcon);\n      this.updateDialogVisibility();\n    },\n    // 监听客户端连接状态变化\n    clientConnected(newValue) {\n      console.log('客户端连接状态变化:', newValue);\n      this.updateDialogVisibility();\n    }\n  },\n  mounted() {\n    // 初始化弹窗状态\n    this.clientNotConnectedDialogVisible = false;\n    \n    // 只在登录状态下启动检查\n    if (this.isLoggedIn) {\n      this.startStatusCheck();\n      // 初始化不活动计时器\n      this.resetInactivityTimer();\n      \n      // 启动后主动检查一次状态并更新弹窗\n      this.$nextTick(() => {\n        this.updateDialogVisibility();\n      });\n    }\n    \n    // 创建定时器，每秒检查一次弹窗状态\n    this.dialogUpdateTimer = setInterval(() => {\n      if (this.isLoggedIn) {\n        this.updateDialogVisibility();\n      }\n    }, 1000);\n  },\n  beforeDestroy() {\n    this.stopStatusCheck();\n    // 确保组件销毁时关闭弹窗\n    this.clientNotConnectedDialogVisible = false;\n    \n    // 清除定时器\n    if (this.dialogUpdateTimer) {\n      clearInterval(this.dialogUpdateTimer);\n      this.dialogUpdateTimer = null;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.layout {\n  height: 100vh;\n  background-color: #f0f2f5;\n}\n\n.el-aside {\n  background: linear-gradient(180deg, #F8FAFF 0%, #F0F5FF 100%);\n  height: 100vh;\n  box-shadow: 1px 0 8px rgba(0,0,0,0.05);\n  display: flex;\n  flex-direction: column;\n  width: 180px !important;\n}\n\n.el-menu {\n  border-right: none;\n  background: transparent;\n  padding-top: 12px;\n  flex: 1;\n  width: 180px;\n}\n\n.el-menu-item {\n  height: 48px;\n  line-height: 48px;\n  color: #5B6B8B !important;\n  margin: 4px 12px;\n  padding: 0 16px !important;\n  border-radius: 8px;\n  font-size: 14px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.el-menu-item:hover {\n  color: #4B7BE5 !important;\n  background-color: rgba(75, 123, 229, 0.08) !important;\n  transform: translateX(4px);\n}\n\n.el-menu-item.is-active {\n  color: #4B7BE5 !important;\n  background-color: rgba(75, 123, 229, 0.12) !important;\n  font-weight: 500;\n}\n\n.el-submenu /deep/ .el-submenu__title {\n  height: 48px;\n  line-height: 48px;\n  color: #5B6B8B !important;\n  margin: 4px 12px;\n  padding: 0 16px !important;\n  border-radius: 8px;\n  font-size: 14px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.el-submenu /deep/ .el-submenu__title:hover {\n  color: #4B7BE5 !important;\n  background-color: rgba(75, 123, 229, 0.08) !important;\n  transform: translateX(4px);\n}\n\n.el-submenu.is-active /deep/ .el-submenu__title {\n  color: #4B7BE5 !important;\n}\n\n.el-submenu /deep/ .el-menu {\n  background-color: transparent !important;\n  padding-left: 8px;\n  margin: 0 8px;\n  border-radius: 8px;\n}\n\n.el-menu-item i, .el-submenu /deep/ .el-submenu__title i {\n  margin-right: 12px;\n  width: 18px;\n  font-size: 18px;\n  color: inherit;\n  transition: all 0.3s ease;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  height: 100%;\n  padding: 0 24px;\n  background: linear-gradient(90deg, #5B8FF9 0%, #4B7BE5 100%);\n  position: relative;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.header-title {\n  color: #fff;\n  font-size: 18px;\n  font-weight: 500;\n  letter-spacing: 0.5px;\n  opacity: 0.95;\n  margin-left: 20px;\n}\n\n.user-dropdown {\n  margin-left: auto;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  padding: 6px 16px;\n  cursor: pointer;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 20px;\n  transition: all 0.3s ease;\n}\n\n.user-info:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.user-info i {\n  color: #fff;\n  font-size: 16px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  padding: 6px 14px; /* 调整 */\n  cursor: pointer;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 20px;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1); /* 调整 */\n  gap: 6px; /* 新增 */\n}\n\n.el-dropdown-menu {\n  min-width: 140px; /* 新增 */\n  border-radius: 6px; /* 调整 */\n  margin-top: 4px; /* 减少间距 */\n}\n\n.el-dropdown-menu__item {\n  align-items: center; /* 新增 */\n  padding: 8px 16px; /* 调整 */\n  font-size: 13px; /* 可选：调小字号 */\n}\n\n.el-dropdown-menu__item i {\n  margin-right: 8px; /* 调整 */\n  width: 18px; /* 新增 */\n  font-size: 16px; /* 调整 */\n}\n\n.el-dropdown-menu__item.is-divided {\n  border-top: 1px solid #ebeef5;\n  margin: 4px 0;\n  padding-top: 8px; /* 调整 */\n}\n\n.el-header {\n  padding: 0;\n  height: 60px !important;\n  box-shadow: 0 1px 4px rgba(0,21,41,0.08);\n  z-index: 10;\n  position: relative;\n}\n\n.el-main {\n  padding: 20px;\n  background-color: #F8FAFF;\n}\n\n.client-status {\n  display: flex;\n  align-items: center;\n  margin-right: 24px;\n  padding: 6px 12px;\n  background: rgba(255,255,255,0.1);\n  border-radius: 20px;\n  backdrop-filter: blur(5px);\n  transition: all 0.3s ease;\n}\n\n.client-status:hover {\n  background: rgba(255,255,255,0.15);\n}\n\n.client-icon {\n  font-size: 16px;\n  color: rgba(255,255,255,0.85);\n  transition: all 0.3s ease;\n}\n\n.client-icon.el-icon-success {\n  color: #67C23A;\n  text-shadow: 0 0 8px rgba(103, 194, 58, 0.3);\n}\n\n.client-icon.el-icon-error {\n  color: #F56C6C;\n  text-shadow: 0 0 8px rgba(245, 108, 108, 0.3);\n}\n\n.client-icon.el-icon-loading {\n  color: #409EFF;\n  text-shadow: 0 0 8px rgba(64, 158, 255, 0.3);\n}\n\n/* 客户端对话框样式 */\n.client-dialog-content {\n  display: flex;\n  padding: 10px;\n}\n\n.client-dialog-icon {\n  margin-right: 15px;\n  display: flex;\n  align-items: flex-start;\n  padding-top: 5px;\n}\n\n.client-dialog-icon i {\n  font-size: 24px;\n  color: #E6A23C;\n  animation: pulse 2s infinite;\n}\n\n.client-dialog-message {\n  flex: 1;\n}\n\n.client-dialog-message p {\n  margin-top: 0;\n  margin-bottom: 10px;\n  font-weight: 500;\n  color: #303133;\n}\n\n.client-dialog-message ul {\n  margin: 0;\n  padding-left: 20px;\n  color: #606266;\n}\n\n.client-dialog-message ul li {\n  margin-bottom: 8px;\n  list-style-type: none;\n}\n\n@keyframes pulse {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.6;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n/* 增加对话框中按钮的间距 */\n.dialog-footer .el-button {\n  margin-left: 10px;\n}\n\n/* 添加客户端未连接弹窗的样式 */\n.client-not-connected-dialog {\n  border-radius: 8px;\n}\n\n.client-not-connected-dialog /deep/ .el-dialog__header {\n  padding: 12px 20px 8px;\n  background-color: #f9f9f9;\n  border-bottom: 1px solid #eee;\n  border-radius: 8px 8px 0 0;\n}\n\n.client-not-connected-dialog /deep/ .el-dialog__title {\n  font-size: 16px;\n  font-weight: 500;\n  color: #333;\n}\n\n.client-not-connected-dialog /deep/ .el-dialog__body {\n  padding: 12px 20px;\n}\n\n.client-not-connected-dialog /deep/ .el-dialog__footer {\n  padding: 8px 20px 12px;\n  border-top: 1px solid #f0f0f0;\n}\n\n.client-not-connected-dialog .client-dialog-content {\n  display: flex;\n  padding: 0;\n}\n\n.client-not-connected-dialog .client-dialog-icon {\n  margin-right: 12px;\n  display: flex;\n  align-items: flex-start;\n  padding-top: 2px;\n}\n\n.client-not-connected-dialog .client-dialog-icon i {\n  font-size: 20px;\n  color: #E6A23C;\n}\n\n.client-not-connected-dialog .client-dialog-message {\n  flex: 1;\n}\n\n.client-not-connected-dialog .client-dialog-message p {\n  margin: 0 0 6px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #303133;\n}\n\n.client-not-connected-dialog .client-dialog-message ul {\n  margin: 0;\n  padding-left: 16px;\n  color: #606266;\n  list-style-type: disc;\n}\n\n.client-not-connected-dialog .client-dialog-message li {\n  margin-bottom: 4px;\n  line-height: 1.4;\n  font-size: 13px;\n  padding-left: 2px;\n}\n\n.client-not-connected-dialog .dialog-footer {\n  margin-top: 0;\n  text-align: right;\n}\n\n.client-not-connected-dialog .dialog-footer .el-button {\n  padding: 7px 15px;\n}\n\n.client-not-connected-dialog .dialog-footer .el-button + .el-button {\n  margin-left: 8px;\n}\n\n.main-content {\n  height: calc(100vh - 50px);\n  overflow-y: auto;\n  padding: 20px;\n}\n</style>"]}]}