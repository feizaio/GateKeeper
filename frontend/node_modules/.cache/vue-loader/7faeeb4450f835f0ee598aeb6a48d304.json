{"remainingRequest":"D:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\gatekeeper\\frontend\\src\\components\\TaskExecution.vue?vue&type=style&index=0&id=5d3ec4da&scoped=true&lang=css","dependencies":[{"path":"D:\\gatekeeper\\frontend\\src\\components\\TaskExecution.vue","mtime":1753233447565},{"path":"D:\\gatekeeper\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1747724957296},{"path":"D:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1747724961113},{"path":"D:\\gatekeeper\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1747724958346},{"path":"D:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747724956321},{"path":"D:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747724959585}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50YXNrLWV4ZWN1dGlvbiB7CiAgcGFkZGluZzogMjBweDsKfQoKLnBhZ2UtaGVhZGVyIHsKICBtYXJnaW4tYm90dG9tOiAyMHB4OwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5oZWFkZXItbGVmdCB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9CgoucGFnZS10aXRsZSB7CiAgZm9udC1zaXplOiAyNHB4OwogIG1hcmdpbjogMDsKICBtYXJnaW4tcmlnaHQ6IDE1cHg7Cn0KCi5zdGF0dXMtdGFnIHsKICBtYXJnaW4tcmlnaHQ6IDEwcHg7Cn0KCi5pbmZvLWNhcmQsCi5sb2ctY2FyZCB7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKfQoKLnNlY3Rpb24tZGl2aWRlciB7CiAgZm9udC1zaXplOiAxNnB4OwogIGZvbnQtd2VpZ2h0OiBib2xkOwogIG1hcmdpbjogMjBweCAwIDEwcHggMDsKICBwYWRkaW5nLWJvdHRvbTogMTBweDsKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0VCRUVGNTsKfQoKLmxvZy1oZWFkZXIgewogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5sb2ctYWN0aW9ucyB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9CgoubG9nLWFjdGlvbnMgLmVsLXN3aXRjaCB7CiAgbWFyZ2luLXJpZ2h0OiAxNXB4Owp9CgoubG9nLWNvbnRlbnQgewogIGhlaWdodDogNjAwcHg7CiAgb3ZlcmZsb3cteTogYXV0bzsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlOwogIGNvbG9yOiAjZjBmMGYwOwogIHBhZGRpbmc6IDEwcHg7CiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTsKICBib3JkZXItcmFkaXVzOiA0cHg7Cn0KCi5sb2ctY29udGVudCBwcmUgewogIG1hcmdpbjogMDsKICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7CiAgd29yZC1icmVhazogYnJlYWstYWxsOwp9Cgoubm8tbG9nIHsKICBoZWlnaHQ6IDEwMCU7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgY29sb3I6ICM5MDkzOTk7Cn0KCi5uby1sb2cgaSB7CiAgZm9udC1zaXplOiA0OHB4OwogIG1hcmdpbi1ib3R0b206IDEwcHg7Cn0KCi5wYXJhbXMtdGFibGUgewogIG1heC13aWR0aDogMTAwJTsKfQoKLnBhcmFtcy10YWJsZSAuZWwtdGFibGUgewogIG1hcmdpbi1ib3R0b206IDA7Cn0K"},{"version":3,"sources":["TaskExecution.vue"],"names":[],"mappings":";AA6aA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"TaskExecution.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"task-execution\">\n    <div class=\"page-header\">\n      <div class=\"header-left\">\n        <h2 class=\"page-title\">任务执行详情</h2>\n        <el-tag :type=\"getStatusType(execution.status)\" class=\"status-tag\">\n          {{ getStatusLabel(execution.status) }}\n        </el-tag>\n      </div>\n      <div class=\"header-actions\">\n        <el-button type=\"primary\" icon=\"el-icon-back\" @click=\"goBack\">\n          返回\n        </el-button>\n        <el-button \n          type=\"danger\" \n          icon=\"el-icon-close\" \n          @click=\"terminateExecution\"\n          v-if=\"canTerminate\">\n          终止执行\n        </el-button>\n      </div>\n    </div>\n\n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        <el-card class=\"info-card\">\n          <div slot=\"header\">\n            <span>执行信息</span>\n          </div>\n          \n          <el-descriptions direction=\"vertical\" :column=\"1\" border>\n            <el-descriptions-item label=\"执行ID\">{{ execution.id }}</el-descriptions-item>\n            <el-descriptions-item label=\"任务名称\">\n              <router-link :to=\"`/system/task-detail/${execution.task_id}`\">\n                {{ task.name }}\n              </router-link>\n            </el-descriptions-item>\n            <el-descriptions-item label=\"任务类型\">{{ getTaskTypeLabel(task.task_type) }}</el-descriptions-item>\n            <el-descriptions-item label=\"状态\">\n              <el-tag :type=\"getStatusType(execution.status)\">\n                {{ getStatusLabel(execution.status) }}\n              </el-tag>\n            </el-descriptions-item>\n            <el-descriptions-item label=\"开始时间\">{{ formatDate(execution.start_time) }}</el-descriptions-item>\n            <el-descriptions-item label=\"结束时间\">\n              {{ execution.end_time ? formatDate(execution.end_time) : '进行中' }}\n            </el-descriptions-item>\n            <el-descriptions-item label=\"执行用户\">{{ executionUser }}</el-descriptions-item>\n            <el-descriptions-item label=\"执行结果\">{{ execution.result || '无结果' }}</el-descriptions-item>\n          </el-descriptions>\n          \n          <!-- Jenkins特有信息 -->\n          <template v-if=\"task.task_type === 'jenkins' && execution.jenkins_build_number\">\n            <div class=\"section-divider\">Jenkins构建信息</div>\n            <el-descriptions direction=\"vertical\" :column=\"1\" border>\n              <el-descriptions-item label=\"构建号\">{{ execution.jenkins_build_number }}</el-descriptions-item>\n              <el-descriptions-item label=\"构建URL\">\n                <a :href=\"execution.jenkins_build_url\" target=\"_blank\">{{ execution.jenkins_build_url }}</a>\n              </el-descriptions-item>\n              <el-descriptions-item label=\"执行参数\" v-if=\"Object.keys(execution.jenkins_parameters || {}).length > 0\">\n                <div class=\"params-table\">\n                  <el-table :data=\"formatJenkinsParams(execution.jenkins_parameters)\" border size=\"small\">\n                    <el-table-column prop=\"name\" label=\"参数名\" width=\"180\"></el-table-column>\n                    <el-table-column prop=\"value\" label=\"参数值\"></el-table-column>\n                  </el-table>\n                </div>\n              </el-descriptions-item>\n            </el-descriptions>\n          </template>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"16\">\n        <el-card class=\"log-card\">\n          <div slot=\"header\" class=\"log-header\">\n            <span>执行日志</span>\n            <div class=\"log-actions\">\n              <el-switch\n                v-model=\"autoScroll\"\n                active-text=\"自动滚动\"\n                inactive-text=\"手动滚动\"\n              ></el-switch>\n              <el-button \n                size=\"mini\" \n                type=\"text\" \n                icon=\"el-icon-refresh\" \n                @click=\"refreshLog\"\n                :loading=\"loadingLog\">\n                刷新\n              </el-button>\n            </div>\n          </div>\n          \n          <div \n            class=\"log-content\" \n            ref=\"logContainer\"\n            v-loading=\"loadingLog\"\n            element-loading-text=\"加载日志中...\"\n          >\n            <pre v-if=\"logContent\">{{ logContent }}</pre>\n            <div v-else class=\"no-log\">\n              <i class=\"el-icon-document\"></i>\n              <span>暂无日志内容</span>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\nexport default {\n  name: 'TaskExecution',\n  props: {\n    id: {\n      type: [Number, String],\n      required: true\n    }\n  },\n  data() {\n    return {\n      execution: {},\n      task: {},\n      logContent: '',\n      loadingExecution: false,\n      loadingLog: false,\n      autoScroll: true,\n      socket: null,\n      executionUser: '',\n      refreshInterval: null\n    };\n  },\n  computed: {\n    canTerminate() {\n      return ['pending', 'running'].includes(this.execution.status);\n    },\n    currentUser() {\n      return this.$store.state.user || {};\n    }\n  },\n  created() {\n    this.loadExecutionDetails();\n  },\n  mounted() {\n    // 设置自动刷新\n    this.refreshInterval = setInterval(() => {\n      if (this.canTerminate) {\n        this.refreshExecution();\n      }\n    }, 5000);\n    \n    // 连接WebSocket\n    this.connectWebSocket();\n  },\n  beforeDestroy() {\n    // 清除自动刷新\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n    \n    // 断开WebSocket连接\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  },\n  methods: {\n    // 加载执行详情\n    async loadExecutionDetails() {\n      this.loadingExecution = true;\n      try {\n        // 获取执行记录\n        const response = await axios.get(`/api/executions/${this.id}`);\n        this.execution = response.data;\n        \n        // 获取任务详情\n        const taskResponse = await axios.get(`/api/tasks/${this.execution.task_id}`);\n        this.task = taskResponse.data;\n        \n        // 获取执行用户信息\n        if (this.execution.user_id) {\n          try {\n            const userResponse = await axios.get(`/api/users/${this.execution.user_id}`);\n            this.executionUser = userResponse.data.username;\n          } catch (error) {\n            console.error('获取用户信息失败:', error);\n            // 直接显示用户ID，不添加前缀\n            this.executionUser = String(this.execution.user_id);\n          }\n        }\n        \n        // 加载日志\n        this.loadLog();\n        \n        this.loadingExecution = false;\n      } catch (error) {\n        this.$message.error('加载执行详情失败: ' + (error.response && error.response.data && error.response.data.error || error.message));\n        this.loadingExecution = false;\n        // 返回任务详情页\n        this.$router.push(`/system/task-detail/${this.execution.task_id}`);\n      }\n    },\n    \n    // 刷新执行状态\n    async refreshExecution() {\n      try {\n        const response = await axios.get(`/api/executions/${this.id}`);\n        this.execution = response.data;\n        \n        // 如果任务已经完成，清除自动刷新\n        if (!this.canTerminate && this.refreshInterval) {\n          clearInterval(this.refreshInterval);\n        }\n      } catch (error) {\n        console.error('刷新执行状态失败:', error);\n      }\n    },\n    \n    // 加载日志\n    async loadLog() {\n      this.loadingLog = true;\n      try {\n        const response = await axios.get(`/api/executions/${this.id}/log`);\n        this.logContent = response.data.log_content || '';\n        \n        // 自动滚动到底部\n        if (this.autoScroll) {\n          this.$nextTick(() => {\n            this.scrollToBottom();\n          });\n        }\n        \n        this.loadingLog = false;\n      } catch (error) {\n        this.$message.error('加载日志失败: ' + (error.response && error.response.data && error.response.data.error || error.message));\n        this.loadingLog = false;\n      }\n    },\n    \n    // 刷新日志\n    refreshLog() {\n      this.loadLog();\n    },\n    \n    // 终止执行\n    async terminateExecution() {\n      try {\n        // 显示确认对话框\n        await this.$confirm(\n          '确定要终止此任务执行吗？如果是Jenkins任务，可能需要一些时间才能完全停止。',\n          '终止任务',\n          {\n            confirmButtonText: '确定终止',\n            cancelButtonText: '取消',\n            type: 'warning'\n          }\n        );\n        \n        // 用户确认后，发送终止请求\n        const response = await axios.post(`/api/executions/${this.id}/terminate`);\n        \n        // 显示响应消息\n        this.$message.success(response.data.message || '任务已终止');\n        \n        // 刷新执行状态\n        this.refreshExecution();\n        \n        // 如果有警告信息，显示通知\n        if (response.data.message && response.data.message.includes('Jenkins构建可能仍在运行')) {\n          this.$notify({\n            title: '警告',\n            message: 'Jenkins构建可能无法完全终止，系统已尝试所有可能的终止方法。',\n            type: 'warning',\n            duration: 10000\n          });\n        }\n      } catch (error) {\n        // 如果用户取消了确认对话框，不显示错误\n        if (error === 'cancel' || error.toString().includes('cancel')) {\n          return;\n        }\n        \n        // 显示错误信息\n        this.$message.error('终止任务失败: ' + (error.response && error.response.data && error.response.data.error || error.message));\n        \n        // 如果是Jenkins任务，显示额外提示\n        if (this.task.task_type === 'jenkins') {\n          this.$notify({\n            title: '提示',\n            message: '您可以尝试直接在Jenkins界面中终止此构建。',\n            type: 'info',\n            duration: 10000\n          });\n        }\n      }\n    },\n    \n    // 连接WebSocket\n    connectWebSocket() {\n      // 创建Socket.IO连接\n      const socketUrl = `${window.location.protocol}//${window.location.host}`;\n      this.socket = io(socketUrl);\n      \n      // 监听日志更新事件\n      this.socket.on(`task_log_update_${this.id}`, data => {\n        if (data.new_content) {\n          this.logContent += data.new_content;\n          \n          // 自动滚动到底部\n          if (this.autoScroll) {\n            this.$nextTick(() => {\n              this.scrollToBottom();\n            });\n          }\n        }\n        \n        // 如果任务完成，刷新执行状态\n        if (data.complete) {\n          this.refreshExecution();\n        }\n      });\n      \n      // 监听任务完成事件\n      this.socket.on(`task_complete_${this.id}`, data => {\n        // 更新执行状态\n        this.execution.status = data.status;\n        this.execution.result = data.result;\n        this.execution.end_time = new Date().toISOString();\n        \n        // 显示通知\n        this.$notify({\n          title: '任务执行完成',\n          message: `任务执行结果: ${data.result || '未知'}`,\n          type: data.status === 'success' ? 'success' : 'warning',\n          duration: 5000\n        });\n      });\n    },\n    \n    // 滚动到日志底部\n    scrollToBottom() {\n      const container = this.$refs.logContainer;\n      if (container) {\n        container.scrollTop = container.scrollHeight;\n      }\n    },\n    \n    // 返回上一页\n    goBack() {\n      if (this.$route.query.from === 'list') {\n        this.$router.push('/system/task-manager');\n      } else {\n        this.$router.push(`/system/task-detail/${this.execution.task_id}`);\n      }\n    },\n    \n    // 格式化日期\n    formatDate(dateString) {\n      if (!dateString) return '';\n      \n      // 创建日期对象\n      const date = new Date(dateString);\n      \n      // 获取UTC时间并添加8小时（东八区）\n      const utcTime = date.getTime();\n      const beijingTime = new Date(utcTime + 8 * 60 * 60 * 1000);\n      \n      // 格式化为本地时间字符串\n      return beijingTime.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n      });\n    },\n    \n    // 获取任务类型标签\n    getTaskTypeLabel(type) {\n      const types = {\n        'jenkins': 'Jenkins任务',\n        'script': '脚本任务',\n        'command': '命令任务'\n      };\n      return types[type] || type;\n    },\n    \n    // 获取状态标签\n    getStatusLabel(status) {\n      const statuses = {\n        'pending': '待执行',\n        'running': '执行中',\n        'success': '成功',\n        'failed': '失败',\n        'terminated': '已终止'\n      };\n      return statuses[status] || status;\n    },\n    \n    // 获取状态标签样式\n    getStatusType(status) {\n      const types = {\n        'pending': 'info',\n        'running': 'primary',\n        'success': 'success',\n        'failed': 'danger',\n        'terminated': 'warning'\n      };\n      return types[status] || '';\n    },\n\n    // 格式化Jenkins参数为表格数据\n    formatJenkinsParams(params) {\n      if (!params) return [];\n      return Object.keys(params).map(key => ({\n        name: key,\n        value: params[key]\n      }));\n    }\n  }\n};\n</script>\n\n<style scoped>\n.task-execution {\n  padding: 20px;\n}\n\n.page-header {\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n}\n\n.page-title {\n  font-size: 24px;\n  margin: 0;\n  margin-right: 15px;\n}\n\n.status-tag {\n  margin-right: 10px;\n}\n\n.info-card,\n.log-card {\n  margin-bottom: 20px;\n}\n\n.section-divider {\n  font-size: 16px;\n  font-weight: bold;\n  margin: 20px 0 10px 0;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #EBEEF5;\n}\n\n.log-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.log-actions {\n  display: flex;\n  align-items: center;\n}\n\n.log-actions .el-switch {\n  margin-right: 15px;\n}\n\n.log-content {\n  height: 600px;\n  overflow-y: auto;\n  background-color: #1e1e1e;\n  color: #f0f0f0;\n  padding: 10px;\n  font-family: monospace;\n  border-radius: 4px;\n}\n\n.log-content pre {\n  margin: 0;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.no-log {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #909399;\n}\n\n.no-log i {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.params-table {\n  max-width: 100%;\n}\n\n.params-table .el-table {\n  margin-bottom: 0;\n}\n</style> "]}]}