{"remainingRequest":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gatekeeper\\frontend\\src\\components\\CredentialManagement.vue?vue&type=style&index=0&id=3a98eb2a&scoped=true&lang=css","dependencies":[{"path":"E:\\gatekeeper\\frontend\\src\\components\\CredentialManagement.vue","mtime":1747723632442},{"path":"E:\\gatekeeper\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1751596767439},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1751596773072},{"path":"E:\\gatekeeper\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1751596769285},{"path":"E:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1751596765290},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1751596771154}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY3JlZGVudGlhbC1tYW5hZ2VtZW50IHsNCiAgcGFkZGluZzogMjBweDsNCn0NCg0KLnRvb2xiYXIgew0KICBtYXJnaW4tYm90dG9tOiAyMHB4Ow0KfQ0KDQouZm9ybS10aXAgew0KICBmb250LXNpemU6IDEycHg7DQogIGNvbG9yOiAjOTA5Mzk5Ow0KICBtYXJnaW4tdG9wOiA1cHg7DQp9DQoNCi5jcmVkZW50aWFsLWRldGFpbCB7DQogIHBhZGRpbmc6IDEwcHg7DQogIGJhY2tncm91bmQtY29sb3I6ICNmOGY4Zjg7DQogIGJvcmRlci1yYWRpdXM6IDRweDsNCn0NCg0KLmRldGFpbC1pdGVtIHsNCiAgbWFyZ2luOiAxMHB4IDA7DQogIGxpbmUtaGVpZ2h0OiAyMHB4Ow0KfQ0KDQouaXRlbS1sYWJlbCB7DQogIGZvbnQtd2VpZ2h0OiBib2xkOw0KICBtYXJnaW4tcmlnaHQ6IDEwcHg7DQogIGNvbG9yOiAjNjA2MjY2Ow0KfQ0KDQouZW1wdHktbGlzdCB7DQogIGNvbG9yOiAjOTA5Mzk5Ow0KICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogIHBhZGRpbmc6IDIwcHggMDsNCn0NCg=="},{"version":3,"sources":["CredentialManagement.vue"],"names":[],"mappings":";AA0SA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"CredentialManagement.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"credential-management\">\r\n    <div class=\"toolbar\">\r\n      <el-button type=\"primary\" @click=\"showAddDialog\">\r\n        <i class=\"el-icon-plus\"></i> 添加凭据\r\n      </el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"credentials\" style=\"width: 100%\">\r\n      <el-table-column prop=\"name\" label=\"凭据名称\"></el-table-column>\r\n      <el-table-column prop=\"username\" label=\"用户名\"></el-table-column>\r\n      <el-table-column prop=\"server_count\" label=\"使用此凭据的服务器数\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag type=\"info\">{{ scope.row.server_count }}</el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"description\" label=\"描述\" show-overflow-tooltip></el-table-column>\r\n      <el-table-column label=\"操作\" width=\"220\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button \r\n            size=\"mini\" \r\n            type=\"primary\"\r\n            @click=\"showViewDialog(scope.row)\">\r\n            查看\r\n          </el-button>\r\n          <el-button \r\n            size=\"mini\" \r\n            type=\"warning\"\r\n            @click=\"showEditDialog(scope.row)\">\r\n            编辑\r\n          </el-button>\r\n          <el-button \r\n            size=\"mini\" \r\n            type=\"danger\" \r\n            @click=\"deleteCredential(scope.row)\"\r\n            :disabled=\"scope.row.server_count > 0\">\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 添加/编辑凭据对话框 -->\r\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" width=\"500px\">\r\n      <el-form :model=\"credentialForm\" :rules=\"rules\" ref=\"credentialForm\" label-width=\"80px\">\r\n        <el-form-item label=\"名称\" prop=\"name\">\r\n          <el-input v-model=\"credentialForm.name\" placeholder=\"请输入凭据名称\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"credentialForm.username\" placeholder=\"请输入用户名\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item :label=\"isEdit ? '新密码' : '密码'\" prop=\"password\">\r\n          <el-input \r\n            type=\"password\" \r\n            v-model=\"credentialForm.password\" \r\n            placeholder=\"请输入密码\"\r\n            show-password>\r\n            <template slot=\"append\">\r\n              <el-button type=\"text\" @click=\"generatePassword\">生成</el-button>\r\n            </template>\r\n          </el-input>\r\n          <div class=\"form-tip\" v-if=\"isEdit\">留空表示不修改密码</div>\r\n        </el-form-item>\r\n        <el-form-item label=\"描述\" prop=\"description\">\r\n          <el-input \r\n            type=\"textarea\" \r\n            v-model=\"credentialForm.description\" \r\n            placeholder=\"请输入描述信息\"\r\n            :rows=\"3\">\r\n          </el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleSubmit\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 查看凭据详情对话框 -->\r\n    <el-dialog title=\"凭据详情\" :visible.sync=\"viewDialogVisible\" width=\"700px\">\r\n      <template v-if=\"currentCredential\">\r\n        <div class=\"credential-detail\">\r\n          <div class=\"detail-item\">\r\n            <span class=\"item-label\">凭据名称：</span>\r\n            <span class=\"item-value\">{{ currentCredential.name }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"item-label\">用户名：</span>\r\n            <span class=\"item-value\">{{ currentCredential.username }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"item-label\">描述：</span>\r\n            <span class=\"item-value\">{{ currentCredential.description || '无' }}</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <el-divider content-position=\"left\">使用此凭据的服务器</el-divider>\r\n        \r\n        <div v-if=\"currentCredential.servers && currentCredential.servers.length > 0\">\r\n          <el-table :data=\"currentCredential.servers\" style=\"width: 100%\">\r\n            <el-table-column prop=\"name\" label=\"服务器名称\"></el-table-column>\r\n            <el-table-column prop=\"ip\" label=\"IP地址\"></el-table-column>\r\n            <el-table-column prop=\"type\" label=\"类型\">\r\n              <template slot-scope=\"scope\">\r\n                <el-tag :type=\"scope.row.type === 'Windows' ? 'primary' : 'success'\">\r\n                  {{ scope.row.type }}\r\n                </el-tag>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </div>\r\n        <div v-else class=\"empty-list\">\r\n          暂无服务器使用此凭据\r\n        </div>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      credentials: [],\r\n      dialogVisible: false,\r\n      viewDialogVisible: false,\r\n      isEdit: false,\r\n      currentCredential: null,\r\n      credentialForm: {\r\n        name: '',\r\n        username: '',\r\n        password: '',\r\n        description: ''\r\n      },\r\n      rules: {\r\n        name: [\r\n          { required: true, message: '请输入凭据名称', trigger: 'blur' },\r\n          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }\r\n        ],\r\n        username: [\r\n          { required: true, message: '请输入用户名', trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          { \r\n            validator: (rule, value, callback) => {\r\n              if (!this.isEdit && !value) {\r\n                callback(new Error('请输入密码'));\r\n              } else {\r\n                callback();\r\n              }\r\n            },\r\n            trigger: 'blur' \r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    dialogTitle() {\r\n      return this.isEdit ? '编辑凭据' : '添加凭据';\r\n    }\r\n  },\r\n  methods: {\r\n    async loadCredentials() {\r\n      try {\r\n        const response = await axios.get('/api/credentials');\r\n        this.credentials = response.data;\r\n      } catch (error) {\r\n        this.$message.error('获取凭据列表失败');\r\n        console.error(error);\r\n      }\r\n    },\r\n    \r\n    showAddDialog() {\r\n      this.isEdit = false;\r\n      this.credentialForm = {\r\n        name: '',\r\n        username: '',\r\n        password: '',\r\n        description: ''\r\n      };\r\n      this.dialogVisible = true;\r\n    },\r\n    \r\n    showEditDialog(credential) {\r\n      this.isEdit = true;\r\n      this.credentialForm = {\r\n        id: credential.id,\r\n        name: credential.name,\r\n        username: credential.username,\r\n        password: '',  // 编辑时不显示密码\r\n        description: credential.description || ''\r\n      };\r\n      this.dialogVisible = true;\r\n    },\r\n    \r\n    async showViewDialog(credential) {\r\n      try {\r\n        const response = await axios.get(`/api/credentials/${credential.id}`);\r\n        this.currentCredential = response.data;\r\n        this.viewDialogVisible = true;\r\n      } catch (error) {\r\n        this.$message.error('获取凭据详情失败');\r\n        console.error(error);\r\n      }\r\n    },\r\n    \r\n    generatePassword() {\r\n      // 生成8-12位的随机密码，包含大小写字母、数字和特殊字符\r\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+';\r\n      const length = 12;\r\n      let password = '';\r\n      \r\n      for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * chars.length);\r\n        password += chars[randomIndex];\r\n      }\r\n      \r\n      this.credentialForm.password = password;\r\n      \r\n      // 弹出提示\r\n      this.$message({\r\n        message: '已生成随机密码',\r\n        type: 'success',\r\n        duration: 2000\r\n      });\r\n    },\r\n    \r\n    async handleSubmit() {\r\n      try {\r\n        await this.$refs.credentialForm.validate();\r\n        \r\n        if (this.isEdit) {\r\n          // 编辑凭据\r\n          const data = {\r\n            name: this.credentialForm.name,\r\n            username: this.credentialForm.username,\r\n            description: this.credentialForm.description\r\n          };\r\n          \r\n          // 只有当密码字段有值时才发送\r\n          if (this.credentialForm.password) {\r\n            data.password = this.credentialForm.password;\r\n          }\r\n          \r\n          await axios.put(`/api/credentials/${this.credentialForm.id}`, data);\r\n          this.$message.success('凭据更新成功');\r\n        } else {\r\n          // 添加凭据\r\n          await axios.post('/api/credentials', this.credentialForm);\r\n          this.$message.success('凭据添加成功');\r\n        }\r\n        \r\n        this.dialogVisible = false;\r\n        this.loadCredentials();\r\n      } catch (error) {\r\n        // 表单验证失败不需要特殊处理\r\n        if (error.constructor && error.constructor.name === 'Error') {\r\n          return;\r\n        }\r\n        \r\n        let errorMessage = '操作失败';\r\n        if (error.response && error.response.data && error.response.data.error) {\r\n          errorMessage = error.response.data.error;\r\n        }\r\n        this.$message.error(errorMessage);\r\n      }\r\n    },\r\n    \r\n    async deleteCredential(credential) {\r\n      try {\r\n        await this.$confirm(`确认删除凭据 \"${credential.name}\"?`, '提示', {\r\n          type: 'warning'\r\n        });\r\n        \r\n        await axios.delete(`/api/credentials/${credential.id}`);\r\n        this.$message.success('删除成功');\r\n        this.loadCredentials();\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          let errorMessage = '删除失败';\r\n          if (error.response && error.response.data && error.response.data.error) {\r\n            errorMessage = error.response.data.error;\r\n          }\r\n          this.$message.error(errorMessage);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.loadCredentials();\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.credential-management {\r\n  padding: 20px;\r\n}\r\n\r\n.toolbar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-tip {\r\n  font-size: 12px;\r\n  color: #909399;\r\n  margin-top: 5px;\r\n}\r\n\r\n.credential-detail {\r\n  padding: 10px;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.detail-item {\r\n  margin: 10px 0;\r\n  line-height: 20px;\r\n}\r\n\r\n.item-label {\r\n  font-weight: bold;\r\n  margin-right: 10px;\r\n  color: #606266;\r\n}\r\n\r\n.empty-list {\r\n  color: #909399;\r\n  text-align: center;\r\n  padding: 20px 0;\r\n}\r\n</style> "]}]}