{"remainingRequest":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gatekeeper\\frontend\\src\\components\\Login.vue?vue&type=style&index=0&id=ef68022e&scoped=true&lang=css","dependencies":[{"path":"E:\\gatekeeper\\frontend\\src\\components\\Login.vue","mtime":1742954253136},{"path":"E:\\gatekeeper\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1740710846355},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1740710850033},{"path":"E:\\gatekeeper\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1740710847386},{"path":"E:\\gatekeeper\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1740710845061},{"path":"E:\\gatekeeper\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1740710848685}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoubG9naW4tY29udGFpbmVyIHsNCiAgaGVpZ2h0OiAxMDB2aDsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICM0MDlFRkYsICM2N0MyM0EpOw0KfQ0KDQoubG9naW4tY2FyZCB7DQogIHdpZHRoOiA0MDBweDsNCiAgcGFkZGluZzogMjBweDsNCn0NCg0KLnRpdGxlIHsNCiAgdGV4dC1hbGlnbjogY2VudGVyOw0KICBtYXJnaW4tYm90dG9tOiAzMHB4Ow0KfQ0KDQoudGl0bGUgaDIgew0KICBjb2xvcjogIzQwOUVGRjsNCn0NCg0KLmVsLWJ1dHRvbiB7DQogIHRyYW5zaXRpb246IGFsbCAwLjNzOw0KfQ0KDQouZWwtYnV0dG9uOmhvdmVyIHsNCiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0ycHgpOw0KICBib3gtc2hhZG93OiAwIDJweCAxMnB4IDAgcmdiYSgwLDAsMCwuMSk7DQp9DQoNCi5lbC1pbnB1dCB7DQogIG1hcmdpbi1ib3R0b206IDVweDsNCn0NCg=="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";AAkHA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Login.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <el-card class=\"login-card\">\r\n      <div class=\"title\">\r\n        <h2>堡垒机管理系统</h2>\r\n      </div>\r\n      <el-form :model=\"loginForm\" :rules=\"rules\" ref=\"loginForm\" @submit.native.prevent>\r\n        <el-form-item prop=\"username\">\r\n          <el-input \r\n            v-model=\"loginForm.username\" \r\n            prefix-icon=\"el-icon-user\"\r\n            placeholder=\"用户名\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\">\r\n          <el-input \r\n            v-model=\"loginForm.password\" \r\n            prefix-icon=\"el-icon-lock\"\r\n            type=\"password\"\r\n            placeholder=\"密码\"\r\n            @keyup.enter.native=\"handleLogin\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" \r\n                     :loading=\"loading\"\r\n                     style=\"width: 100%\"\r\n                     @click=\"handleLogin\">\r\n            {{ loading ? '登录中...' : '登录' }}\r\n          </el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      isSubmitting: false, // 用于防止重复提交\r\n      loginForm: {\r\n        username: '',\r\n        password: ''\r\n      },\r\n      rules: {\r\n        username: [\r\n          { required: true, message: '请输入用户名', trigger: 'blur' },\r\n          { min: 3, max: 20, message: '用户名长度在 3 到 20 个字符', trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          { required: true, message: '请输入密码', trigger: 'blur' },\r\n          { min: 6, max: 20, message: '密码长度在 6 到 20 个字符', trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async handleLogin() {\r\n      // 防止重复提交\r\n      if (this.loading || this.isSubmitting) {\r\n        console.log('登录请求正在处理中，请勿重复提交');\r\n        return;\r\n      }\r\n      \r\n      // 表单验证\r\n      this.$refs.loginForm.validate(async valid => {\r\n        if (!valid) {\r\n          return false;\r\n        }\r\n        \r\n        this.loading = true;\r\n        this.isSubmitting = true; // 标记开始提交\r\n        \r\n        try {\r\n          const response = await axios.post('/api/auth/login', this.loginForm);\r\n          localStorage.setItem('token', response.data.token);  // 存储token\r\n          this.$store.commit('SET_USER', response.data);      // 更新用户状态\r\n          this.$message.success('登录成功');\r\n          console.log('跳转到首页');\r\n          \r\n          // 登录成功后延迟导航，避免导航过快导致问题\r\n          setTimeout(() => {\r\n            this.$router.push('/');  // 登录成功后跳转到首页\r\n          }, 100);\r\n          \r\n        } catch (error) {\r\n          console.error('登录失败:', error);\r\n          let errorMessage = '登录失败';\r\n          if (error.response) {\r\n            errorMessage = error.response.data.error || '服务器错误';\r\n          } else if (error.request) {\r\n            errorMessage = '网络错误，请检查网络连接';\r\n          } else {\r\n            errorMessage = error.message || '未知错误';\r\n          }\r\n          this.$message.error(errorMessage);\r\n        } finally {\r\n          // 延迟重置状态，避免快速点击仍然可能导致重复提交\r\n          setTimeout(() => {\r\n            this.loading = false;\r\n            this.isSubmitting = false; // 标记结束提交\r\n          }, 500);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: linear-gradient(135deg, #409EFF, #67C23A);\r\n}\r\n\r\n.login-card {\r\n  width: 400px;\r\n  padding: 20px;\r\n}\r\n\r\n.title {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.title h2 {\r\n  color: #409EFF;\r\n}\r\n\r\n.el-button {\r\n  transition: all 0.3s;\r\n}\r\n\r\n.el-button:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\r\n}\r\n\r\n.el-input {\r\n  margin-bottom: 5px;\r\n}\r\n</style>"]}]}